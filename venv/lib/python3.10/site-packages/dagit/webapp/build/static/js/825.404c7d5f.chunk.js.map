{"version":3,"file":"static/js/825.404c7d5f.chunk.js","mappings":"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","sources":["../../core/src/assets/AssetGroupRoot.tsx","../../core/src/launchpad/LaunchpadSetupFromRunRoot.tsx","../../core/src/launchpad/LaunchpadSetupRoot.tsx","../../core/src/nav/LatestRunTag.tsx","../../core/src/nav/JobMetadata.tsx","../../core/src/nav/PipelineNav.tsx","../../core/src/partitions/BackfillSelector.tsx","../../core/src/partitions/PartitionGraph.tsx","../../core/src/partitions/PartitionView.tsx","../../core/src/partitions/PipelinePartitionsRoot.tsx","../../core/src/pipelines/PipelineOrJobDisambiguationRoot.tsx","../../core/src/pipelines/PipelineOverviewRoot.tsx","../../core/src/pipelines/PipelineRoot.tsx","../../core/src/instigation/LiveTickTimeline.tsx","../../core/src/instigation/TickDetailsDialog.tsx","../../core/src/instigation/TickHistory.tsx","../../core/src/schedules/ScheduleDetails.tsx","../../core/src/schedules/ScheduleRoot.tsx","../../core/src/sensors/SensorPreviousRuns.tsx","../../core/src/sensors/SensorRoot.tsx","../../core/src/workspace/GraphRoot.tsx","../../core/src/workspace/RepositoryRemoteLocationLink.tsx","../../core/src/workspace/RepositoryLocationsList.tsx","../../core/src/workspace/WorkspaceOverviewRoot.tsx","../../core/src/workspace/WorkspacePipelineRoot.tsx","../../core/src/ops/OpCard.tsx","../../core/src/ops/OpDetailsRoot.tsx","../../core/src/ops/OpsRoot.tsx","../../core/src/schedules/SchedulesRoot.tsx","../../core/src/sensors/SensorsRoot.tsx","../../core/src/workspace/RepositoryAssetsList.tsx","../../core/src/workspace/RepositoryGraphsList.tsx","../../core/src/pipelines/PipelineTable.tsx","../../core/src/workspace/RepositoryPipelinesList.tsx","../../core/src/workspace/WorkspaceRepoRoot.tsx","../../core/src/workspace/WorkspaceRoot.tsx"],"sourcesContent":["import {Page, PageHeader, Heading, Box, Tag, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {\n  ExplorerPath,\n  explorerPathFromString,\n  explorerPathToString,\n} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {ReloadAllButton} from '../workspace/ReloadAllButton';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {AssetGlobalLineageLink} from './AssetPageHeader';\nimport {AssetsCatalogTable} from './AssetsCatalogTable';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\n\ninterface AssetGroupRootParams {\n  groupName: string;\n  prefixPath: string;\n  0: string;\n}\n\nexport const AssetGroupRoot: React.FC<{repoAddress: RepoAddress; tab: 'lineage' | 'list'}> = ({\n  repoAddress,\n  tab,\n}) => {\n  useTrackPageView();\n\n  const {groupName, 0: path} = useParams<AssetGroupRootParams>();\n  const history = useHistory();\n\n  useDocumentTitle(`Asset Group: ${groupName}`);\n\n  const groupPath = workspacePathFromAddress(repoAddress, `/asset-groups/${groupName}`);\n  const groupSelector = React.useMemo(\n    () => ({\n      groupName,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [groupName, repoAddress],\n  );\n\n  const onChangeExplorerPath = React.useCallback(\n    (path: ExplorerPath, mode: 'push' | 'replace') => {\n      history[mode](`${groupPath}/${explorerPathToString(path)}`);\n    },\n    [groupPath, history],\n  );\n\n  const onNavigateToForeignNode = React.useCallback(\n    (node: AssetLocation) => {\n      if (node.groupName && node.repoAddress) {\n        history.replace(\n          workspacePathFromAddress(\n            node.repoAddress,\n            `/asset-groups/${node.groupName}/lineage/${node.assetKey.path\n              .map(encodeURIComponent)\n              .join('/')}`,\n          ),\n        );\n      } else {\n        history.push(assetDetailsPathForKey(node.assetKey, {view: 'definition'}));\n      }\n    },\n    [history],\n  );\n\n  return (\n    <Page style={{display: 'flex', flexDirection: 'column', paddingBottom: 0}}>\n      <PageHeader\n        title={<Heading>{groupName}</Heading>}\n        right={\n          <div style={{marginBottom: -8}}>\n            <ReloadAllButton label=\"Reload definitions\" />\n          </div>\n        }\n        tags={\n          <Tag icon=\"asset_group\">\n            Asset Group in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n        tabs={\n          <Box\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            margin={{right: 4}}\n          >\n            <Tabs selectedTabId={tab}>\n              <TabLink id=\"lineage\" title=\"Lineage\" to={`${groupPath}/lineage`} />\n              <TabLink id=\"list\" title=\"List\" to={`${groupPath}/list`} />\n            </Tabs>\n            <AssetGlobalLineageLink />\n          </Box>\n        }\n      />\n      {tab === 'lineage' ? (\n        <AssetGraphExplorer\n          fetchOptions={{groupSelector}}\n          options={{preferAssetRendering: true, explodeComposites: true}}\n          explorerPath={explorerPathFromString(path || 'lineage/')}\n          onChangeExplorerPath={onChangeExplorerPath}\n          onNavigateToForeignNode={onNavigateToForeignNode}\n        />\n      ) : (\n        <AssetsCatalogTable\n          groupSelector={groupSelector}\n          prefixPath={path.split('/').map(decodeURIComponent).filter(Boolean)}\n          setPrefixPath={(prefixPath) =>\n            history.push(`${groupPath}/list/${prefixPath.map(encodeURIComponent).join('/')}`)\n          }\n        />\n      )}\n    </Page>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {\n  IExecutionSession,\n  applyCreateSession,\n  useExecutionSessionStorage,\n} from '../app/ExecutionSessionStorage';\nimport {usePermissions} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {LaunchpadSessionError} from './LaunchpadSessionError';\nimport {LaunchpadSessionLoading} from './LaunchpadSessionLoading';\nimport {ConfigForRunQuery, ConfigForRunQueryVariables} from './types/ConfigForRunQuery';\n\nexport const LaunchpadSetupFromRunRoot: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {canLaunchPipelineExecution} = usePermissions();\n  const {repoPath, pipelinePath, runId} = useParams<{\n    repoPath: string;\n    pipelinePath: string;\n    runId: string;\n  }>();\n\n  if (!canLaunchPipelineExecution) {\n    return <Redirect to={`/workspace/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n  return (\n    <LaunchpadSetupFromRunAllowedRoot\n      pipelinePath={pipelinePath}\n      repoAddress={repoAddress}\n      runId={runId}\n    />\n  );\n};\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n  runId: string;\n}\n\n/**\n * For a given run ID, retrieve the run config and populate a new Launchpad session with its\n * values, then redirect to the launchpad. The newly created session will be the open launchpad\n * config tab.\n */\nconst LaunchpadSetupFromRunAllowedRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress, runId} = props;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [storageData, onSave] = useExecutionSessionStorage(repoAddress, pipelineName);\n\n  const {data, loading} = useQuery<ConfigForRunQuery, ConfigForRunQueryVariables>(\n    CONFIG_FOR_RUN_QUERY,\n    {variables: {runId}},\n  );\n  const runOrError = data?.runOrError;\n  const run = runOrError?.__typename === 'Run' ? runOrError : null;\n\n  React.useEffect(() => {\n    // Wait until we have a run, then create the session.\n    if (!run) {\n      return;\n    }\n\n    const {runConfigYaml, mode, solidSelection} = run;\n    if (runConfigYaml || mode || solidSelection) {\n      // Name the session after this run ID.\n      const newSession: Partial<IExecutionSession> = {name: `From run ${run.id.slice(0, 8)}`};\n\n      if (typeof runConfigYaml === 'string') {\n        newSession.runConfigYaml = runConfigYaml;\n      }\n      if (typeof mode === 'string') {\n        newSession.mode = mode;\n      }\n      if (solidSelection instanceof Array && solidSelection.length > 0) {\n        newSession.solidSelection = solidSelection as string[];\n      } else if (typeof solidSelection === 'string' && solidSelection) {\n        newSession.solidSelection = [solidSelection];\n      }\n\n      onSave(applyCreateSession(storageData, newSession));\n    }\n  }, [run, storageData, onSave]);\n\n  if (loading) {\n    return <LaunchpadSessionLoading />;\n  }\n\n  if (!runOrError || runOrError.__typename === 'RunNotFoundError') {\n    return (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title=\"No run found\"\n        description=\"The run with this ID does not exist or has been cleaned up.\"\n      />\n    );\n  }\n\n  if (runOrError.__typename === 'PythonError') {\n    return (\n      <LaunchpadSessionError icon=\"error\" title=\"Python error\" description={runOrError.message} />\n    );\n  }\n\n  return (\n    <Redirect\n      to={{\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/playground`,\n        ),\n      }}\n    />\n  );\n};\n\nconst CONFIG_FOR_RUN_QUERY = gql`\n  query ConfigForRunQuery($runId: ID!) {\n    runOrError(runId: $runId) {\n      ... on Run {\n        id\n        mode\n        runConfigYaml\n        solidSelection\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import qs from 'qs';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {\n  IExecutionSession,\n  applyCreateSession,\n  useExecutionSessionStorage,\n} from '../app/ExecutionSessionStorage';\nimport {usePermissions} from '../app/Permissions';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nexport const LaunchpadSetupRoot: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {canLaunchPipelineExecution} = usePermissions();\n  const {repoPath, pipelinePath} = useParams<{repoPath: string; pipelinePath: string}>();\n\n  if (!canLaunchPipelineExecution) {\n    return <Redirect to={`/workspace/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n  return <LaunchpadSetupAllowedRoot pipelinePath={pipelinePath} repoAddress={repoAddress} />;\n};\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n}\n\nconst LaunchpadSetupAllowedRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress} = props;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [data, onSave] = useExecutionSessionStorage(repoAddress, pipelineName);\n  const queryString = qs.parse(window.location.search, {ignoreQueryPrefix: true});\n\n  React.useEffect(() => {\n    if (queryString.config || queryString.mode || queryString.solidSelection) {\n      const newSession: Partial<IExecutionSession> = {};\n      if (typeof queryString.config === 'string') {\n        newSession.runConfigYaml = queryString.config;\n      }\n      if (typeof queryString.mode === 'string') {\n        newSession.mode = queryString.mode;\n      }\n      if (queryString.solidSelection instanceof Array && queryString.solidSelection.length > 0) {\n        newSession.solidSelection = queryString.solidSelection as string[];\n      } else if (typeof queryString.solidSelection === 'string' && queryString.solidSelection) {\n        newSession.solidSelection = [queryString.solidSelection];\n      }\n      if (typeof queryString.solidSelectionQuery === 'string') {\n        newSession.solidSelectionQuery = queryString.solidSelectionQuery;\n      }\n\n      onSave(applyCreateSession(data, newSession));\n    }\n  });\n\n  return (\n    <Redirect\n      to={{\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/playground`,\n        ),\n      }}\n    />\n  );\n};\n","import {useQuery, gql} from '@apollo/client';\nimport {Box, Colors, StyledTable, Tag, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {timingStringForStatus} from '../runs/RunDetails';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunTime, RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {RunStatus} from '../types/globalTypes';\n\nimport {LatestRunTagQuery, LatestRunTagQueryVariables} from './types/LatestRunTagQuery';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\nexport const LatestRunTag: React.FC<{pipelineName: string}> = ({pipelineName}) => {\n  const lastRunQuery = useQuery<LatestRunTagQuery, LatestRunTagQueryVariables>(\n    LATEST_RUN_TAG_QUERY,\n    {variables: {runsFilter: {pipelineName}}, notifyOnNetworkStatusChange: true},\n  );\n\n  useQueryRefreshAtInterval(lastRunQuery, FIFTEEN_SECONDS);\n\n  const run = React.useMemo(() => {\n    const runsOrError = lastRunQuery.data?.pipelineRunsOrError;\n    if (runsOrError && runsOrError.__typename === 'Runs') {\n      return runsOrError.results[0] || null;\n    }\n    return null;\n  }, [lastRunQuery]);\n\n  if (!run) {\n    return null;\n  }\n\n  const stats = {start: run.startTime, end: run.endTime, status: run.status};\n  const intent = () => {\n    switch (run.status) {\n      case RunStatus.SUCCESS:\n        return 'success';\n      case RunStatus.CANCELED:\n      case RunStatus.CANCELING:\n      case RunStatus.FAILURE:\n        return 'danger';\n      default:\n        return 'none';\n    }\n  };\n\n  return (\n    <Tag intent={intent()}>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <RunStatusIndicator status={run.status} size={10} />\n        Latest run:\n        {stats ? (\n          <Tooltip\n            placement=\"bottom\"\n            content={\n              <StyledTable>\n                <tbody>\n                  <tr>\n                    <td style={{color: Colors.Gray300}}>\n                      <Box padding={{right: 16}}>Started</Box>\n                    </td>\n                    <td>\n                      {stats.start ? (\n                        <TimestampDisplay timestamp={stats.start} timeFormat={TIME_FORMAT} />\n                      ) : (\n                        timingStringForStatus(stats.status)\n                      )}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style={{color: Colors.Gray300}}>Ended</td>\n                    <td>\n                      {stats.end ? (\n                        <TimestampDisplay timestamp={stats.end} timeFormat={TIME_FORMAT} />\n                      ) : (\n                        timingStringForStatus(stats.status)\n                      )}\n                    </td>\n                  </tr>\n                </tbody>\n              </StyledTable>\n            }\n          >\n            <Link to={`/instance/runs/${run.id}`}>\n              <RunTime run={run} />\n            </Link>\n          </Tooltip>\n        ) : null}\n      </Box>\n    </Tag>\n  );\n};\n\nconst LATEST_RUN_TAG_QUERY = gql`\n  query LatestRunTagQuery($runsFilter: RunsFilter) {\n    pipelineRunsOrError(filter: $runsFilter, limit: 1) {\n      ... on PipelineRuns {\n        results {\n          id\n          status\n          ...RunTimeFragment\n        }\n      }\n    }\n  }\n  ${RUN_TIME_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Button, ButtonLink, Colors, DialogFooter, Dialog, Table, Tag} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {RepoAddress} from '../workspace/types';\n\nimport {LatestRunTag} from './LatestRunTag';\nimport {ScheduleOrSensorTag} from './ScheduleOrSensorTag';\nimport {JobMetadataFragment as Job} from './types/JobMetadataFragment';\nimport {JobMetadataQuery, JobMetadataQueryVariables} from './types/JobMetadataQuery';\nimport {RunMetadataFragment} from './types/RunMetadataFragment';\n\ninterface Props {\n  pipelineName: string;\n  repoAddress: RepoAddress;\n}\n\nexport const JobMetadata: React.FC<Props> = (props) => {\n  const {pipelineName, repoAddress} = props;\n\n  const {data} = useQuery<JobMetadataQuery, JobMetadataQueryVariables>(JOB_METADATA_QUERY, {\n    variables: {\n      runsFilter: {\n        pipelineName,\n      },\n      params: {\n        pipelineName,\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n      },\n    },\n  });\n\n  const job = React.useMemo(() => {\n    if (data?.pipelineOrError && data.pipelineOrError.__typename === 'Pipeline') {\n      return data.pipelineOrError;\n    }\n    return null;\n  }, [data]);\n\n  const runsForAssetScan = React.useMemo(() => {\n    if (data?.pipelineRunsOrError && data.pipelineRunsOrError.__typename === 'Runs') {\n      return data.pipelineRunsOrError.results;\n    }\n    return [];\n  }, [data]);\n\n  return (\n    <>\n      {job ? <JobScheduleOrSensorTag job={job} repoAddress={repoAddress} /> : null}\n      <LatestRunTag pipelineName={pipelineName} />\n      {runsForAssetScan ? <RelatedAssetsTag runs={runsForAssetScan} /> : null}\n    </>\n  );\n};\n\nconst JobScheduleOrSensorTag: React.FC<{\n  job: Job;\n  repoAddress: RepoAddress;\n}> = ({job, repoAddress}) => {\n  const matchingSchedules = React.useMemo(() => {\n    if (job?.__typename === 'Pipeline' && job.schedules.length) {\n      return job.schedules;\n    }\n    return [];\n  }, [job]);\n\n  const matchingSensors = React.useMemo(() => {\n    if (job?.__typename === 'Pipeline' && job.sensors.length) {\n      return job.sensors;\n    }\n    return [];\n  }, [job]);\n\n  return (\n    <ScheduleOrSensorTag\n      schedules={matchingSchedules}\n      sensors={matchingSensors}\n      repoAddress={repoAddress}\n    />\n  );\n};\n\nconst RelatedAssetsTag: React.FC<{runs: RunMetadataFragment[]}> = ({runs}) => {\n  const [open, setOpen] = React.useState(false);\n\n  const assetMap = {};\n  runs.forEach((run) => {\n    run.assets.forEach((asset) => {\n      const assetKeyStr = asset.key.path.join('/');\n      assetMap[assetKeyStr] = true;\n    });\n  });\n\n  const keys = Object.keys(assetMap);\n  if (keys.length === 0) {\n    return null;\n  }\n\n  if (keys.length === 1) {\n    const key = keys[0];\n    return (\n      <Tag icon=\"asset\">\n        Asset: <Link to={`/instance/assets/${key}`}>{key}</Link>\n      </Tag>\n    );\n  }\n\n  return (\n    <>\n      <Tag icon=\"asset\">\n        <ButtonLink\n          color={Colors.Link}\n          onClick={() => setOpen(true)}\n        >{`View ${keys.length} assets`}</ButtonLink>\n      </Tag>\n      <Dialog\n        title=\"Related assets\"\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        style={{maxWidth: '80%', minWidth: '500px', width: 'auto'}}\n      >\n        <Box padding={{bottom: 12}}>\n          <Table>\n            <tbody>\n              {keys.map((key) => (\n                <tr key={key}>\n                  <td>\n                    <Link\n                      key={key}\n                      to={`/instance/assets/${key}`}\n                      style={{wordBreak: 'break-word'}}\n                    >\n                      {key}\n                    </Link>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setOpen(false)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst RUN_METADATA_FRAGMENT = gql`\n  fragment RunMetadataFragment on PipelineRun {\n    id\n    status\n    assets {\n      id\n      key {\n        path\n      }\n    }\n    ...RunTimeFragment\n  }\n  ${RUN_TIME_FRAGMENT}\n`;\n\nconst JOB_METADATA_FRAGMENT = gql`\n  fragment JobMetadataFragment on Pipeline {\n    id\n    isJob\n    name\n    schedules {\n      id\n      mode\n      ...ScheduleSwitchFragment\n    }\n    sensors {\n      id\n      targets {\n        pipelineName\n        mode\n      }\n      ...SensorSwitchFragment\n    }\n  }\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n\nconst JOB_METADATA_QUERY = gql`\n  query JobMetadataQuery($params: PipelineSelector!, $runsFilter: RunsFilter!) {\n    pipelineOrError(params: $params) {\n      ... on Pipeline {\n        id\n        ...JobMetadataFragment\n      }\n    }\n    pipelineRunsOrError(filter: $runsFilter, limit: 5) {\n      ... on PipelineRuns {\n        results {\n          id\n          ...RunMetadataFragment\n        }\n      }\n    }\n  }\n  ${JOB_METADATA_FRAGMENT}\n  ${RUN_METADATA_FRAGMENT}\n`;\n","import {Box, PageHeader, Tabs, Tag, Heading, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {useRouteMatch} from 'react-router-dom';\n\nimport {DISABLED_MESSAGE, PermissionsMap, usePermissions} from '../app/Permissions';\nimport {\n  explorerPathFromString,\n  explorerPathToString,\n  ExplorerPath,\n} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {JobMetadata} from './JobMetadata';\nimport {RepositoryLink} from './RepositoryLink';\n\ninterface TabConfig {\n  title: string;\n  pathComponent: string;\n  isAvailable?: (permissions: PermissionsMap) => boolean;\n}\n\nconst pipelineTabs: {[key: string]: TabConfig} = {\n  overview: {title: 'Overview', pathComponent: ''},\n  playground: {\n    title: 'Launchpad',\n    pathComponent: 'playground',\n    isAvailable: (permissions: PermissionsMap) => permissions.canLaunchPipelineExecution,\n  },\n  runs: {\n    title: 'Runs',\n    pathComponent: 'runs',\n  },\n  partitions: {\n    title: 'Partitions',\n    pathComponent: 'partitions',\n  },\n};\n\nconst currentOrder = ['overview', 'playground', 'runs', 'partitions'];\n\nfunction tabForPipelinePathComponent(component?: string): TabConfig {\n  const tabList = Object.keys(pipelineTabs);\n  const match =\n    tabList.find((t) => pipelineTabs[t].pathComponent === component) ||\n    tabList.find((t) => pipelineTabs[t].pathComponent === '')!;\n  return pipelineTabs[match];\n}\n\nconst tabForKey = (repoAddress: RepoAddress, isJob: boolean, explorerPath: ExplorerPath) => {\n  const explorerPathForTab = explorerPathToString({\n    ...explorerPath,\n    opNames: [],\n  });\n\n  // When you click one of the top tabs, it resets the snapshot you may be looking at\n  // in the Definition tab and also clears solids from the path\n  return (key: string) => {\n    const tab = pipelineTabs[key];\n    return {\n      text: tab.title,\n      href: workspacePathFromAddress(\n        repoAddress,\n        `/${isJob ? 'jobs' : 'pipelines'}/${explorerPathForTab}${tab.pathComponent}`,\n      ),\n      isAvailable: tab.isAvailable,\n    };\n  };\n};\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineNav: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const permissions = usePermissions();\n  const repo = useRepository(repoAddress);\n  const match = useRouteMatch<{tab?: string; selector: string}>([\n    '/workspace/:repoPath/pipelines/:selector/:tab?',\n    '/workspace/:repoPath/jobs/:selector/:tab?',\n    '/workspace/:repoPath/pipeline_or_job/:selector/:tab?',\n  ]);\n\n  const active = tabForPipelinePathComponent(match!.params.tab);\n  const explorerPath = explorerPathFromString(match!.params.selector);\n  const {pipelineName, snapshotId} = explorerPath;\n  const isJob = isThisThingAJob(repo, pipelineName);\n  const partitionSets = repo?.repository.partitionSets || [];\n\n  // If using pipeline:mode tuple (crag flag), check for partition sets that are for this specific\n  // pipeline:mode tuple. Otherwise, just check for a pipeline name match.\n  const hasPartitionSet = partitionSets.some(\n    (partitionSet) => partitionSet.pipelineName === pipelineName,\n  );\n\n  const tabs = currentOrder\n    .filter((key) => hasPartitionSet || key !== 'partitions')\n    .map(tabForKey(repoAddress, isJob, explorerPath));\n\n  return (\n    <>\n      <PageHeader\n        title={<Heading>{pipelineName}</Heading>}\n        tags={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8, wrap: 'wrap'}}>\n            <Tag icon=\"job\">\n              {isJob ? 'Job in ' : 'Pipeline in '}\n              <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {snapshotId ? null : (\n              <JobMetadata pipelineName={pipelineName} repoAddress={repoAddress} />\n            )}\n          </Box>\n        }\n        tabs={\n          <Tabs size=\"large\" selectedTabId={active.title}>\n            {tabs.map((tab) => {\n              const {href, text, isAvailable} = tab;\n              const disabled = isAvailable && !isAvailable(permissions);\n              const title = disabled ? (\n                <Tooltip content={DISABLED_MESSAGE} placement=\"top\">\n                  {text}\n                </Tooltip>\n              ) : (\n                text\n              );\n              return <TabLink key={text} id={text} title={title} disabled={disabled} to={href} />;\n            })}\n          </Tabs>\n        }\n      />\n    </>\n  );\n};\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  ButtonLink,\n  Checkbox,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Tooltip,\n  Mono,\n} from '@dagster-io/ui';\nimport {History} from 'history';\nimport * as React from 'react';\nimport {useHistory} from 'react-router';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {PipelineRunTag} from '../app/ExecutionSessionStorage';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {LAUNCH_PARTITION_BACKFILL_MUTATION} from '../instance/BackfillUtils';\nimport {\n  LaunchPartitionBackfill,\n  LaunchPartitionBackfillVariables,\n} from '../instance/types/LaunchPartitionBackfill';\nimport {LaunchButton} from '../launchpad/LaunchButton';\nimport {TagContainer, TagEditor} from '../launchpad/TagEditor';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\nimport {RunStatus} from '../types/globalTypes';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionRangeInput} from './PartitionRangeInput';\nimport {PartitionStatus} from './PartitionStatus';\nimport {BackfillSelectorQuery, BackfillSelectorQueryVariables} from './types/BackfillSelectorQuery';\n\nconst DEFAULT_RUN_LAUNCHER_NAME = 'DefaultRunLauncher';\n\ninterface BackfillOptions {\n  reexecute: boolean;\n  fromFailure: boolean;\n}\n\nexport const BackfillPartitionSelector: React.FC<{\n  partitionSetName: string;\n  partitionNames: string[];\n  partitionData: {[name: string]: RunStatus | null};\n  pipelineName: string;\n  onLaunch?: (backfillId: string, stepQuery: string) => void;\n  onCancel?: () => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({\n  partitionSetName,\n  onLaunch,\n  onCancel,\n  onSubmit,\n  repoAddress,\n  partitionData,\n  pipelineName,\n  partitionNames,\n}) => {\n  const history = useHistory();\n  const [selected, _setSelected] = React.useState<string[]>(\n    Object.keys(partitionData).filter(\n      (k) => !partitionData[k] || partitionData[k] === RunStatus.FAILURE,\n    ),\n  );\n  const [tagEditorOpen, setTagEditorOpen] = React.useState<boolean>(false);\n  const [tags, setTags] = React.useState<PipelineRunTag[]>([]);\n  const [query, setQuery] = React.useState<string>('');\n  const [options, setOptions] = React.useState<BackfillOptions>({\n    reexecute: false,\n    fromFailure: false,\n  });\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data} = useQuery<BackfillSelectorQuery, BackfillSelectorQueryVariables>(\n    BACKFILL_SELECTOR_QUERY,\n    {\n      variables: {\n        pipelineSelector: {\n          ...repositorySelector,\n          pipelineName,\n        },\n      },\n      fetchPolicy: 'network-only',\n    },\n  );\n\n  const mounted = React.useRef(true);\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onLaunch]);\n\n  const onSuccess = (backfillId: string) => {\n    showBackfillSuccessToast(history, backfillId);\n    onLaunch?.(backfillId, query);\n  };\n\n  const onError = (data: LaunchPartitionBackfill | null | undefined) => {\n    showBackfillErrorToast(data);\n  };\n\n  if (!data) {\n    return (\n      <Box margin={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineSnapshotOrError.__typename !== 'PipelineSnapshot') {\n    return (\n      <Box margin={20}>\n        <NonIdealState icon=\"error\" title=\"Could not fetch job details\" />\n      </Box>\n    );\n  }\n\n  const {pipelineSnapshotOrError: pipelineSnapshot, instance} = data;\n  const solids = explodeCompositesInHandleGraph(pipelineSnapshot.solidHandles).map(\n    (h: any) => h.solid,\n  );\n  const solidsFiltered = filterByQuery(solids, query);\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n  const stepRows = layout.boxes.map((box) => ({\n    x: box.x,\n    name: box.node.name,\n  }));\n\n  const usingDefaultRunLauncher = instance.runLauncher?.name === DEFAULT_RUN_LAUNCHER_NAME;\n\n  const isFailed = (name: string) =>\n    partitionData[name] === RunStatus.FAILURE ||\n    partitionData[name] === RunStatus.CANCELED ||\n    partitionData[name] === RunStatus.CANCELING;\n  const failedPartitions = partitionNames.filter(isFailed);\n  const missingPartitions = partitionNames.filter((name: string) => !partitionData[name]);\n  const successPartitions = partitionNames.filter(\n    (name: string) => partitionData[name] === RunStatus.SUCCESS,\n  );\n  const setSelected = (selection: string[]) => {\n    const selectionSet = new Set(selection);\n    // first order the partition names, according to the order given by partition names, which\n    // is the order determined from the partition definition set in user code\n    _setSelected(partitionNames.filter((name) => selectionSet.has(name)));\n    if (options.fromFailure && selection.filter((x) => !isFailed(x)).length > 0) {\n      setOptions({...options, fromFailure: false});\n    }\n  };\n\n  return (\n    <>\n      <DialogBody>\n        <Box flex={{direction: 'column', gap: 32}}>\n          <Section title=\"Partitions\">\n            <Box>\n              Select the set of partitions to include in the backfill. You can specify a range using\n              the text selector, or by dragging a range selection in the status indicator.\n            </Box>\n            <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n              <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n                {successPartitions.length ? (\n                  <Checkbox\n                    style={{marginBottom: 0, marginLeft: 10}}\n                    checked={successPartitions.every((x) => selected.includes(x))}\n                    label=\"Succeeded\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      if (e.target.checked) {\n                        setSelected(Array.from(new Set(selected.concat(successPartitions))));\n                      } else {\n                        setSelected(selected.filter((x) => !successPartitions.includes(x)));\n                      }\n                    }}\n                  />\n                ) : null}\n                {failedPartitions.length ? (\n                  <Checkbox\n                    style={{marginBottom: 0, marginLeft: 10}}\n                    checked={failedPartitions.every((x) => selected.includes(x))}\n                    label=\"Failed\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      if (e.target.checked) {\n                        setSelected(Array.from(new Set(selected.concat(failedPartitions))));\n                      } else {\n                        setSelected(selected.filter((x) => !failedPartitions.includes(x)));\n                      }\n                    }}\n                  />\n                ) : null}\n                {missingPartitions.length ? (\n                  <Checkbox\n                    style={{marginBottom: 0, marginLeft: 10}}\n                    checked={missingPartitions.every((x) => selected.includes(x))}\n                    label=\"Missing\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      if (e.target.checked) {\n                        setSelected(Array.from(new Set(selected.concat(missingPartitions))));\n                      } else {\n                        setSelected(selected.filter((x) => !missingPartitions.includes(x)));\n                      }\n                    }}\n                  />\n                ) : null}\n              </Box>\n              <Button\n                icon={<Icon name=\"close\" />}\n                disabled={!partitionNames.length}\n                style={{marginBottom: 0, marginLeft: 10}}\n                small={true}\n                onClick={() => {\n                  setSelected([]);\n                }}\n              >\n                Clear selection\n              </Button>\n            </Box>\n            <PartitionRangeInput\n              value={selected}\n              partitionNames={partitionNames}\n              onChange={setSelected}\n            />\n            <Box margin={{top: 8}}>\n              <PartitionStatus\n                partitionNames={partitionNames}\n                partitionData={partitionData}\n                selected={selected}\n                onSelect={(partitionNames: string[]) => {\n                  setSelected(partitionNames);\n                }}\n              />\n            </Box>\n          </Section>\n\n          {failedPartitions.length ? (\n            <Section title=\"Reexecution\">\n              <Checkbox\n                checked={options.fromFailure}\n                disabled={!selected.every(isFailed)}\n                onChange={() => {\n                  if (!options.fromFailure) {\n                    setSelected(failedPartitions);\n                  }\n                  setQuery('');\n                  setOptions({\n                    ...options,\n                    reexecute: !options.reexecute,\n                    fromFailure: !options.fromFailure,\n                  });\n                }}\n                label={\n                  <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n                    <Box margin={{right: 4}}>Re-execute from failures</Box>\n                    <Tooltip\n                      placement=\"top\"\n                      content=\"For each partition, if the most recent run failed, launch a re-execution starting from the steps that failed. Only applies for selections of failed partitions.\"\n                    >\n                      <Icon name=\"info\" color={Colors.Gray500} />\n                    </Tooltip>\n                  </Box>\n                }\n              />\n            </Section>\n          ) : null}\n\n          <Section\n            title={\n              <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n                <Box margin={{right: 4}}>Step subset</Box>\n                <Tooltip\n                  placement=\"top\"\n                  content=\"Applies a step-selection to each run for the requested partitions.\"\n                >\n                  <Icon name=\"info\" color={Colors.Gray500} />\n                </Tooltip>\n              </Box>\n            }\n          >\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n              <GraphQueryInput\n                disabled={options.fromFailure}\n                width={520}\n                items={solids}\n                value={query}\n                placeholder=\"Type a step subset\"\n                onChange={setQuery}\n                autoApplyChanges={true}\n              />\n              {query ? (\n                <div style={{color: Colors.Gray500}}>\n                  {stepRows.length} step{stepRows.length === 1 ? '' : 's'} selected\n                </div>\n              ) : null}\n            </Box>\n          </Section>\n\n          <Section title=\"Tags\">\n            <TagEditor\n              tagsFromSession={tags}\n              onChange={setTags}\n              open={tagEditorOpen}\n              onRequestClose={() => setTagEditorOpen(false)}\n            />\n            {tags.length ? (\n              <div style={{border: `1px solid ${Colors.Gray300}`, borderRadius: 8, padding: 3}}>\n                <TagContainer tagsFromSession={tags} onRequestEdit={() => setTagEditorOpen(true)} />\n              </div>\n            ) : (\n              <div>\n                <Button onClick={() => setTagEditorOpen(true)}>Add tags to backfill runs</Button>\n              </div>\n            )}\n          </Section>\n\n          {!instance.daemonHealth.daemonStatus.healthy ? <DaemonNotRunningAlert /> : null}\n\n          {usingDefaultRunLauncher && !instance.runQueuingSupported ? (\n            <UsingDefaultLauncherAlert />\n          ) : null}\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <LaunchBackfillButton\n          partitionNames={selected}\n          partitionSetName={partitionSetName}\n          reexecutionSteps={\n            !options.fromFailure && solidsFiltered.all.length < solids.length\n              ? stepRows.map((step) => step.name)\n              : undefined\n          }\n          fromFailure={options.fromFailure}\n          tags={tags}\n          onSubmit={onSubmit}\n          onSuccess={onSuccess}\n          onError={onError}\n          repoAddress={repoAddress}\n        />\n      </DialogFooter>\n    </>\n  );\n};\n\nconst LaunchBackfillButton: React.FC<{\n  partitionSetName: string;\n  partitionNames: string[];\n  reexecutionSteps?: string[];\n  fromFailure?: boolean;\n  tags?: PipelineRunTag[];\n  onSuccess?: (backfillId: string) => void;\n  onError: (data: LaunchPartitionBackfill | null | undefined) => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({\n  partitionSetName,\n  partitionNames,\n  reexecutionSteps,\n  fromFailure,\n  tags,\n  onSuccess,\n  onError,\n  onSubmit,\n  repoAddress,\n}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const mounted = React.useRef(true);\n  const [launchBackfill, {loading}] = useMutation<\n    LaunchPartitionBackfill,\n    LaunchPartitionBackfillVariables\n  >(LAUNCH_PARTITION_BACKFILL_MUTATION);\n\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onSuccess]);\n\n  const onLaunch = async () => {\n    onSubmit();\n    const {data} = await launchBackfill({\n      variables: {\n        backfillParams: {\n          selector: {\n            partitionSetName,\n            repositorySelector,\n          },\n          partitionNames,\n          reexecutionSteps,\n          fromFailure,\n          tags,\n        },\n      },\n    });\n\n    if (!mounted.current) {\n      return;\n    }\n\n    if (data && data.launchPartitionBackfill.__typename === 'LaunchBackfillSuccess') {\n      onSuccess?.(data.launchPartitionBackfill.backfillId);\n    } else {\n      onError?.(data);\n    }\n  };\n\n  const count = partitionNames.length;\n  const reexecutionCount = reexecutionSteps?.length;\n\n  const title = () => {\n    if (loading) {\n      return `Submitting ${count} ${count === 1 ? 'run' : 'runs'}…`;\n    }\n\n    if (count) {\n      return `Submit ${count} ${count === 1 ? 'run' : 'runs'}`;\n    }\n\n    return 'Select partitions to submit';\n  };\n\n  const subtitle = () => {\n    return !loading && reexecutionCount\n      ? `(${reexecutionCount} selected ${reexecutionCount === 1 ? 'step' : 'steps'})`\n      : '';\n  };\n\n  const buttonTitle = [title(), subtitle()].join(' ');\n\n  return (\n    <LaunchButton\n      runCount={count}\n      config={{\n        title: buttonTitle,\n        icon: 'open_in_new',\n        disabled: !count || loading,\n        onClick: onLaunch,\n      }}\n    />\n  );\n};\n\nconst BACKFILL_SELECTOR_QUERY = gql`\n  query BackfillSelectorQuery($pipelineSelector: PipelineSelector!) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          handleID\n          ...GraphExplorerSolidHandleFragment\n          solid {\n            name\n            definition {\n              name\n            }\n            inputs {\n              dependsOn {\n                solid {\n                  name\n                }\n              }\n            }\n            outputs {\n              dependedBy {\n                solid {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    instance {\n      runLauncher {\n        name\n      }\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"BACKFILL\") {\n          id\n          healthy\n        }\n      }\n      runQueuingSupported\n    }\n  }\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n`;\n\nfunction messageForLaunchBackfillError(data: LaunchPartitionBackfill | null | undefined) {\n  const result = data?.launchPartitionBackfill;\n\n  let errors = <></>;\n  if (result?.__typename === 'PythonError' || result?.__typename === 'PartitionSetNotFoundError') {\n    errors = <PythonErrorInfo error={result} />;\n  } else if (result?.__typename === 'InvalidStepError') {\n    errors = <div>{`Invalid step: ${result.invalidStepKey}`}</div>;\n  } else if (result?.__typename === 'InvalidOutputError') {\n    errors = <div>{`Invalid output: ${result.invalidOutputName} for ${result.stepKey}`}</div>;\n  } else if (result && 'errors' in result) {\n    errors = (\n      <>\n        {result['errors'].map((error, idx) => (\n          <PythonErrorInfo error={error} key={idx} />\n        ))}\n      </>\n    );\n  }\n\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <div>An unexpected error occurred. This backfill was not launched.</div>\n      {errors ? (\n        <ButtonLink\n          color={Colors.White}\n          underline=\"always\"\n          onClick={() => {\n            showCustomAlert({\n              body: errors,\n            });\n          }}\n        >\n          View error\n        </ButtonLink>\n      ) : null}\n    </Group>\n  );\n}\n\nexport function showBackfillErrorToast(data: LaunchPartitionBackfill | null | undefined) {\n  SharedToaster.show({\n    message: messageForLaunchBackfillError(data),\n    icon: 'error',\n    intent: 'danger',\n  });\n}\n\nexport function showBackfillSuccessToast(history: History<unknown>, backfillId: string) {\n  SharedToaster.show({\n    intent: 'success',\n    message: (\n      <div>\n        Created backfill <Mono>{backfillId}</Mono>\n      </div>\n    ),\n    action: {\n      text: 'View',\n      onClick: () => history.push(`/instance/backfills`),\n    },\n  });\n}\n\nconst DaemonNotRunningAlert: React.FC = () => (\n  <Alert\n    intent=\"warning\"\n    title=\"The backfill daemon is not running.\"\n    description={\n      <div>\n        See the{' '}\n        <a\n          href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          dagster-daemon documentation\n        </a>{' '}\n        for more information on how to deploy the dagster-daemon process.\n      </div>\n    }\n  />\n);\n\nconst UsingDefaultLauncherAlert: React.FC = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Using the default run launcher <code>{DEFAULT_RUN_LAUNCHER_NAME}</code> for launching\n        backfills without a queued run coordinator is not advised.\n      </div>\n    }\n    description={\n      <div>\n        Check your instance configuration in <code>dagster.yaml</code> to either configure the{' '}\n        <a\n          href=\"https://docs.dagster.io/deployment/run-coordinator\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          queued run coordinator\n        </a>{' '}\n        or to configure a run launcher more appropriate for launching a large number of jobs.\n      </div>\n    }\n  />\n);\n\nconst Section = ({\n  title,\n  children,\n}: {\n  title: string | React.ReactNode;\n  children: React.ReactNode;\n}) => (\n  <Box flex={{direction: 'column', gap: 8}}>\n    <strong style={{display: 'block'}}>{title}</strong>\n    <Box\n      flex={{direction: 'column', gap: 8}}\n      padding={{top: 16}}\n      border={{width: 1, color: Colors.KeylineGray, side: 'top'}}\n    >\n      {children}\n    </Box>\n  </Box>\n);\n","import {Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport styled from 'styled-components/macro';\n\nimport {colorHash} from '../app/Util';\n\ntype PointValue = number | null | undefined;\ntype Point = {x: string; y: PointValue};\n\ninterface PartitionGraphProps {\n  partitionNames: string[];\n  jobDataByPartition?: {[partitionName: string]: PointValue};\n  stepDataByPartition?: {[partitionName: string]: {[key: string]: PointValue[]}};\n  title?: string;\n  yLabel?: string;\n  isJob: boolean;\n  hiddenStepKeys?: string[];\n}\n\nexport const PartitionGraph = ({\n  partitionNames,\n  jobDataByPartition,\n  stepDataByPartition,\n  title,\n  yLabel,\n  isJob,\n  hiddenStepKeys,\n}: PartitionGraphProps) => {\n  const [hiddenPartitions, setHiddenPartitions] = React.useState<{[name: string]: boolean}>(\n    () => ({}),\n  );\n  const chart = React.useRef<any>(null);\n\n  const onGraphClick = React.useCallback((event: MouseEvent) => {\n    const instance = chart.current;\n    if (!instance) {\n      return;\n    }\n    const xAxis = instance.scales['x-axis-0'];\n    if (!xAxis) {\n      return;\n    }\n    const {offsetX, offsetY} = event;\n\n    const isChartClick =\n      event.type === 'click' &&\n      offsetX <= instance.chartArea.right &&\n      offsetX >= instance.chartArea.left &&\n      offsetY <= instance.chartArea.bottom &&\n      offsetY >= instance.chartArea.top;\n\n    if (!isChartClick || !event.shiftKey) {\n      return;\n    }\n\n    // category scale returns index here for some reason\n    const labelIndex = xAxis.getValueForPixel(offsetX);\n    const partitionName = instance.data.labels[labelIndex];\n    setHiddenPartitions((current) => ({\n      ...current,\n      [partitionName]: !current[partitionName],\n    }));\n  }, []);\n\n  const defaultOptions = React.useMemo(() => {\n    const titleOptions = title ? {display: true, text: title} : undefined;\n    const scales = yLabel\n      ? {\n          y: {\n            id: 'y',\n            title: {display: true, text: yLabel},\n          },\n          x: {\n            id: 'x',\n            title: {display: true, text: title},\n          },\n        }\n      : undefined;\n\n    return {\n      title: titleOptions,\n      animation: false,\n      scales,\n      plugins: {\n        legend: {\n          display: false,\n          onClick: (_e: MouseEvent, _legendItem: any) => {},\n        },\n      },\n      onClick: onGraphClick,\n      maintainAspectRatio: false,\n    };\n  }, [onGraphClick, title, yLabel]);\n\n  const buildDatasetData = () => {\n    const jobData: Point[] = [];\n    const stepData = {};\n\n    partitionNames.forEach((partitionName) => {\n      const hidden = !!hiddenPartitions[partitionName];\n      if (jobDataByPartition) {\n        jobData.push({\n          x: partitionName,\n          y: !hidden ? jobDataByPartition[partitionName] : undefined,\n        });\n      }\n\n      if (stepDataByPartition) {\n        const stepDataByKey = stepDataByPartition[partitionName];\n        Object.keys(stepDataByKey || {}).forEach((stepKey) => {\n          if (hiddenStepKeys?.includes(stepKey) || !stepDataByKey[stepKey]) {\n            return;\n          }\n          stepData[stepKey] = [\n            ...(stepData[stepKey] || []),\n            {\n              x: partitionName,\n              y: !hidden ? stepDataByKey[stepKey] : undefined,\n            },\n          ];\n        });\n      }\n    });\n\n    // stepData may have holes due to missing runs or missing steps.  For these to\n    // render properly, fill in the holes with `undefined` values.\n    Object.keys(stepData).forEach((stepKey) => {\n      stepData[stepKey] = _fillPartitions(partitionNames, stepData[stepKey]);\n    });\n\n    return {jobData, stepData};\n  };\n\n  const {jobData, stepData} = buildDatasetData();\n  const allLabel = isJob ? 'Total job' : 'Total pipeline';\n  const graphData = {\n    labels: partitionNames,\n    datasets: [\n      ...(!jobDataByPartition || (hiddenStepKeys && hiddenStepKeys.includes(allLabel))\n        ? []\n        : [\n            {\n              label: allLabel,\n              data: jobData,\n              borderColor: Colors.Gray500,\n              backgroundColor: 'rgba(0,0,0,0)',\n            },\n          ]),\n      ...Object.keys(stepData).map((stepKey) => ({\n        label: stepKey,\n        data: stepData[stepKey],\n        borderColor: colorHash(stepKey),\n        backgroundColor: 'rgba(0,0,0,0)',\n      })),\n    ],\n  };\n\n  // Passing graphData as a closure prevents ChartJS from trying to isEqual, which is fairly\n  // unlikely to save a render and is time consuming given the size of the data structure.\n  // We have a useMemo around the entire <PartitionGraphSet /> and there aren't many extra renders.\n  return (\n    <PartitionGraphContainer>\n      <Line type=\"line\" data={() => graphData} height={300} options={defaultOptions} ref={chart} />\n    </PartitionGraphContainer>\n  );\n};\n\nconst _fillPartitions = (partitionNames: string[], points: Point[]) => {\n  const pointData = {};\n  points.forEach((point) => {\n    pointData[point.x] = point.y;\n  });\n\n  return partitionNames.map((partitionName) => ({\n    x: partitionName,\n    y: pointData[partitionName],\n  }));\n};\n\nconst PartitionGraphContainer = styled.div`\n  display: flex;\n  color: ${Colors.Gray700};\n  padding: 24px 12px;\n  text-decoration: none;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Dialog,\n  Icon,\n  Tooltip,\n  Colors,\n  CursorPaginationControls,\n  CursorPaginationProps,\n  NonIdealState,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DISABLED_MESSAGE, usePermissions} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {OptionsContainer} from '../gantt/VizComponents';\nimport {useViewport} from '../gantt/useViewport';\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from '../instance/BackfillTable';\nimport {RepositorySelector, RunStatus} from '../types/globalTypes';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BackfillPartitionSelector} from './BackfillSelector';\nimport {PartitionGraph} from './PartitionGraph';\nimport {PartitionStatus} from './PartitionStatus';\nimport {PartitionStepStatus} from './PartitionStepStatus';\nimport {\n  PartitionsStatusQuery_partitionSetOrError_PartitionSet_partitionStatusesOrError_PartitionStatuses_results,\n  PartitionsStatusQuery_partitionSetOrError_PartitionSet,\n  PartitionsStatusQuery,\n  PartitionsStatusQueryVariables,\n} from './types/PartitionsStatusQuery';\nimport {PipelinePartitionsRootQuery_partitionSetsOrError_PartitionSets_results} from './types/PipelinePartitionsRootQuery';\nimport {usePartitionStepQuery} from './usePartitionStepQuery';\n\ntype PartitionSet = PipelinePartitionsRootQuery_partitionSetsOrError_PartitionSets_results;\ntype PartitionStatus = PartitionsStatusQuery_partitionSetOrError_PartitionSet_partitionStatusesOrError_PartitionStatuses_results;\n\nconst FAILED_STATUSES = [RunStatus.FAILURE, RunStatus.CANCELED, RunStatus.CANCELING];\n\nexport const PartitionView: React.FC<{\n  partitionSet: PartitionSet;\n  repoAddress: RepoAddress;\n}> = ({partitionSet, repoAddress}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const queryResult = useQuery<PartitionsStatusQuery, PartitionsStatusQueryVariables>(\n    PARTITIONS_STATUS_QUERY,\n    {\n      variables: {\n        partitionSetName: partitionSet.name,\n        repositorySelector,\n      },\n    },\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetOrError}) => {\n        if (\n          partitionSetOrError.__typename !== 'PartitionSet' ||\n          partitionSetOrError.partitionsOrError.__typename !== 'Partitions'\n        ) {\n          return null;\n        }\n\n        const partitionNames = partitionSetOrError.partitionsOrError.results.map(({name}) => name);\n\n        return (\n          <PartitionViewContent\n            partitionNames={partitionNames}\n            partitionSet={partitionSetOrError}\n            repoAddress={repoAddress}\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst PartitionViewContent: React.FC<{\n  partitionNames: string[];\n  partitionSet: PartitionsStatusQuery_partitionSetOrError_PartitionSet;\n  repoAddress: RepoAddress;\n}> = ({partitionSet, partitionNames, repoAddress}) => {\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n  const [showSteps, setShowSteps] = React.useState(false);\n  const [showBackfillSetup, setShowBackfillSetup] = React.useState(false);\n  const [blockDialog, setBlockDialog] = React.useState(false);\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const {canLaunchPartitionBackfill} = usePermissions();\n  const {viewport, containerProps} = useViewport();\n  const [backfillRefetchCounter, setBackfillRefetchCounter] = React.useState(0);\n  const partitions = usePartitionStepQuery(\n    partitionSet.name,\n    partitionNames,\n    pageSize,\n    [],\n    partitionSet.pipelineName,\n    offset,\n    !showSteps,\n  );\n\n  React.useEffect(() => {\n    if (viewport.width && !showSteps) {\n      // magical numbers to approximate the size of the window, which is calculated in the step\n      // status component.  This approximation is to make sure that the window does not jump as\n      // the pageSize gets recalculated\n      const _approximatePageSize = Math.ceil((viewport.width - 330) / 32) - 3;\n      setPageSize(_approximatePageSize);\n    }\n  }, [viewport.width, showSteps, setPageSize]);\n\n  const selectedPartitions = showSteps\n    ? partitionNames.slice(\n        Math.max(0, partitionNames.length - 1 - offset - pageSize),\n        partitionNames.length - offset,\n      )\n    : partitionNames;\n\n  const runDurationData: {[name: string]: number | undefined} = {};\n\n  const stepDurationData: {[name: string]: {[key: string]: (number | undefined)[]}} = {};\n  partitions.forEach((p) => {\n    if (!p.runsLoaded || p.runs.length === 0) {\n      return;\n    }\n    const lastRun = p.runs[p.runs.length - 1];\n    stepDurationData[p.name] = {};\n    lastRun.stepStats.forEach((s) => {\n      stepDurationData[p.name][s.stepKey] = [\n        s.endTime && s.startTime ? s.endTime - s.startTime : undefined,\n      ];\n    });\n  });\n  const statusData: {[name: string]: RunStatus | null} = {};\n  (partitionSet.partitionStatusesOrError.__typename === 'PartitionStatuses'\n    ? partitionSet.partitionStatusesOrError.results\n    : []\n  ).forEach((p) => {\n    statusData[p.partitionName] = p.runStatus;\n    if (selectedPartitions.includes(p.partitionName)) {\n      runDurationData[p.partitionName] = p.runDuration || undefined;\n    }\n  });\n\n  const onSubmit = React.useCallback(() => setBlockDialog(true), []);\n\n  return (\n    <div>\n      <Dialog\n        canEscapeKeyClose={!blockDialog}\n        canOutsideClickClose={!blockDialog}\n        onClose={() => setShowBackfillSetup(false)}\n        style={{width: 800, zIndex: 1000}}\n        title={`Launch ${partitionSet.pipelineName} backfill`}\n        isOpen={showBackfillSetup}\n      >\n        {showBackfillSetup && (\n          <BackfillPartitionSelector\n            partitionSetName={partitionSet.name}\n            partitionNames={partitionNames}\n            partitionData={statusData}\n            pipelineName={partitionSet.pipelineName}\n            onCancel={() => setShowBackfillSetup(false)}\n            onLaunch={(_backfillId, _stepQuery) => {\n              setBackfillRefetchCounter(backfillRefetchCounter + 1);\n              setShowBackfillSetup(false);\n            }}\n            onSubmit={onSubmit}\n            repoAddress={repoAddress}\n          />\n        )}\n      </Dialog>\n\n      <Box\n        flex={{justifyContent: 'space-between', direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={16}\n      >\n        <div>\n          <strong>Status</strong>\n        </div>\n        <Box flex={{gap: 8}}>\n          <Button onClick={() => setShowSteps(!showSteps)} active={showBackfillSetup}>\n            {showSteps ? 'Hide per-step status' : 'Show per-step status'}\n          </Button>\n          {canLaunchPartitionBackfill ? (\n            <Button\n              onClick={() => setShowBackfillSetup(!showBackfillSetup)}\n              icon={<Icon name=\"add_circle\" />}\n              active={showBackfillSetup}\n            >\n              Launch backfill...\n            </Button>\n          ) : (\n            <Tooltip content={DISABLED_MESSAGE}>\n              <Button icon={<Icon name=\"add_circle\" />} disabled>\n                Launch backfill...\n              </Button>\n            </Tooltip>\n          )}\n        </Box>\n      </Box>\n      <Box\n        flex={{justifyContent: 'space-between', direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n      >\n        <CountBox count={partitionNames.length} label=\"Total partitions\" />\n        <CountBox\n          count={\n            partitionNames.filter((x) => {\n              const status = statusData[x];\n              return status && FAILED_STATUSES.includes(status);\n            }).length\n          }\n          label=\"Failed partitions\"\n        />\n        <CountBox\n          count={partitionNames.filter((x) => !statusData[x]).length}\n          label=\"Missing partitions\"\n        />\n      </Box>\n      <Box margin={16}>\n        <div {...containerProps}>\n          <PartitionStatus\n            partitionNames={partitionNames}\n            partitionData={statusData}\n            selected={showSteps ? selectedPartitions : undefined}\n            selectionWindowSize={pageSize}\n            onClick={(partitionName) => {\n              const maxIdx = partitionNames.length - 1;\n              const selectedIdx = partitionNames.indexOf(partitionName);\n              const nextOffset = Math.min(\n                maxIdx,\n                Math.max(0, maxIdx - selectedIdx - 0.5 * pageSize),\n              );\n              setOffset(nextOffset);\n              if (!showSteps) {\n                setShowSteps(true);\n              }\n            }}\n            tooltipMessage=\"Click to view per-step status\"\n          />\n        </div>\n        {showSteps ? (\n          <Box margin={{top: 16}}>\n            <PartitionStepStatus\n              partitionNames={partitionNames}\n              partitions={partitions}\n              pipelineName={partitionSet.pipelineName}\n              repoAddress={repoAddress}\n              setPageSize={setPageSize}\n              offset={offset}\n              setOffset={setOffset}\n            />\n          </Box>\n        ) : null}\n      </Box>\n      <OptionsContainer>\n        <strong>Run duration</strong>\n      </OptionsContainer>\n      <Box margin={24}>\n        <PartitionGraph\n          isJob={true}\n          title=\"Execution Time by Partition\"\n          yLabel=\"Execution time (secs)\"\n          partitionNames={showSteps ? selectedPartitions : partitionNames}\n          jobDataByPartition={runDurationData}\n        />\n      </Box>\n      {showSteps ? (\n        <>\n          <OptionsContainer>\n            <strong>Step duration</strong>\n          </OptionsContainer>\n          <Box margin={24}>\n            <PartitionGraph\n              isJob={true}\n              title=\"Execution Time by Partition\"\n              yLabel=\"Execution time (secs)\"\n              partitionNames={selectedPartitions}\n              stepDataByPartition={stepDurationData}\n            />\n          </Box>\n        </>\n      ) : null}\n      <OptionsContainer>\n        <strong>Backfill History</strong>\n      </OptionsContainer>\n      <Box margin={16}>\n        <JobBackfills\n          partitionSet={partitionSet}\n          repositorySelector={repositorySelector}\n          partitionNames={partitionNames}\n          refetchCounter={backfillRefetchCounter}\n        />\n      </Box>\n    </div>\n  );\n};\n\nconst BACKFILL_PAGE_SIZE = 10;\n\nconst JobBackfills = ({\n  partitionSet,\n  partitionNames,\n  repositorySelector,\n  refetchCounter,\n}: {\n  partitionSet: PartitionsStatusQuery_partitionSetOrError_PartitionSet;\n  partitionNames: string[];\n  repositorySelector: RepositorySelector;\n  refetchCounter: number;\n}) => {\n  const [cursorStack, setCursorStack] = React.useState<string[]>(() => []);\n  const [cursor, setCursor] = React.useState<string | undefined>();\n  const queryResult = useQuery(JOB_BACKFILLS_QUERY, {\n    variables: {\n      partitionSetName: partitionSet.name,\n      repositorySelector,\n      cursor,\n      limit: BACKFILL_PAGE_SIZE,\n    },\n    partialRefetch: true,\n  });\n\n  const refetch = queryResult.refetch;\n  React.useEffect(() => {\n    refetchCounter && refetch();\n  }, [refetch, refetchCounter]);\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetOrError}) => {\n        const {backfills, pipelineName} = partitionSetOrError;\n\n        if (!backfills.length) {\n          return <NonIdealState title={`No backfills for ${pipelineName}`} icon=\"no-results\" />;\n        }\n\n        const paginationProps: CursorPaginationProps = {\n          hasPrevCursor: !!cursor,\n          hasNextCursor: backfills && backfills.length === BACKFILL_PAGE_SIZE,\n          popCursor: () => {\n            const nextStack = [...cursorStack];\n            setCursor(nextStack.pop());\n            setCursorStack(nextStack);\n          },\n          advanceCursor: () => {\n            if (cursor) {\n              setCursorStack((current) => [...current, cursor]);\n            }\n            const nextCursor = backfills && backfills[backfills.length - 1].backfillId;\n            if (!nextCursor) {\n              return;\n            }\n            setCursor(nextCursor);\n          },\n          reset: () => {\n            setCursorStack([]);\n            setCursor(undefined);\n          },\n        };\n        return (\n          <>\n            <BackfillTable\n              backfills={backfills}\n              refetch={refetch}\n              showPartitionSet={false}\n              allPartitions={partitionNames}\n            />\n            <CursorPaginationControls {...paginationProps} />\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst CountBox: React.FC<{\n  count: number;\n  label: string;\n}> = ({count, label}) => (\n  <div style={{flex: 1, borderLeft: `1px solid ${Colors.KeylineGray}`, padding: 16}}>\n    <div style={{fontSize: 18, marginBottom: 4}}>\n      <strong>{count}</strong>\n    </div>\n    <div>{label}</div>\n  </div>\n);\n\nconst PARTITIONS_STATUS_QUERY = gql`\n  query PartitionsStatusQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      ... on PartitionSet {\n        id\n        name\n        pipelineName\n        partitionsOrError {\n          ... on Partitions {\n            results {\n              name\n            }\n          }\n        }\n        partitionStatusesOrError {\n          __typename\n          ... on PartitionStatuses {\n            results {\n              id\n              partitionName\n              runStatus\n              runDuration\n            }\n          }\n          ...PythonErrorFragment\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst JOB_BACKFILLS_QUERY = gql`\n  query JobBackfillsQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n    $cursor: String\n    $limit: Int\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      ... on PartitionSet {\n        id\n        pipelineName\n        backfills(cursor: $cursor, limit: $limit) {\n          ...BackfillTableFragment\n        }\n      }\n    }\n  }\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {explorerPathFromString, useStripSnapshotFromPath} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {Loading} from '../ui/Loading';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionView} from './PartitionView';\nimport {\n  PipelinePartitionsRootQuery,\n  PipelinePartitionsRootQueryVariables,\n} from './types/PipelinePartitionsRootQuery';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelinePartitionsRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const params = useParams<{pipelinePath: string}>();\n  const {pipelinePath} = params;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath(params);\n\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<PipelinePartitionsRootQuery, PipelinePartitionsRootQueryVariables>(\n    PIPELINE_PARTITIONS_ROOT_QUERY,\n    {\n      variables: {repositorySelector, pipelineName},\n      fetchPolicy: 'network-only',\n    },\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetsOrError}) => {\n        if (partitionSetsOrError.__typename !== 'PartitionSets') {\n          return (\n            <Box padding={{vertical: 64}}>\n              <NonIdealState\n                icon=\"error\"\n                title=\"Partitions\"\n                description={partitionSetsOrError.message}\n              />\n            </Box>\n          );\n        }\n\n        if (!partitionSetsOrError.results.length) {\n          return (\n            <Box padding={{vertical: 64}}>\n              <NonIdealState\n                icon=\"error\"\n                title=\"Partitions\"\n                description={\n                  <p>\n                    There are no partition sets defined for {isJob ? 'job' : 'pipeline'}{' '}\n                    <code>{pipelineName}</code>.\n                  </p>\n                }\n              />\n            </Box>\n          );\n        }\n\n        return (\n          <PartitionView partitionSet={partitionSetsOrError.results[0]} repoAddress={repoAddress} />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst PIPELINE_PARTITIONS_ROOT_QUERY = gql`\n  query PipelinePartitionsRootQuery(\n    $pipelineName: String!\n    $repositorySelector: RepositorySelector!\n  ) {\n    partitionSetsOrError(pipelineName: $pipelineName, repositorySelector: $repositorySelector) {\n      ... on PipelineNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n      ... on PartitionSets {\n        results {\n          id\n          mode\n          name\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import * as React from 'react';\nimport {Redirect, useLocation, useParams} from 'react-router-dom';\n\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineOrJobDisambiguationRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const location = useLocation();\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n\n  const {pipelineName: pipelineOrJobName} = explorerPathFromString(pipelinePath);\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineOrJobName);\n  const {pathname, search} = location;\n\n  const replacedPath = pathname.replace('/pipeline_or_job/', isJob ? '/jobs/' : '/pipelines/');\n\n  return <Redirect to={`${replacedPath}${search}`} />;\n};\n","import * as React from 'react';\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {buildPipelineSelector, isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {GraphExplorerJobContext} from './GraphExplorerJobContext';\nimport {PipelineExplorerContainer} from './PipelineExplorerRoot';\nimport {\n  explorerPathFromString,\n  explorerPathToString,\n  ExplorerPath,\n  useStripSnapshotFromPath,\n} from './PipelinePathUtils';\nimport {SidebarPipelineOrJobOverview} from './SidebarPipelineOrJobOverview';\nimport {useJobTitle} from './useJobTitle';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineOverviewRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const history = useHistory();\n  const location = useLocation();\n  const params = useParams();\n\n  const explorerPath = explorerPathFromString(params['0']);\n\n  const repo = useRepository(repoAddress);\n  const pipelineSelector = buildPipelineSelector(repoAddress, explorerPath.pipelineName);\n  const isJob = isThisThingAJob(repo, explorerPath.pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath({pipelinePath: explorerPathToString(explorerPath)});\n\n  const onChangeExplorerPath = React.useCallback(\n    (path: ExplorerPath, action: 'push' | 'replace') => {\n      history[action]({\n        search: location.search,\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${explorerPathToString(path)}`,\n        ),\n      });\n    },\n    [history, location.search, repoAddress, isJob],\n  );\n\n  const onNavigateToForeignNode = React.useCallback(\n    (node: AssetLocation) => {\n      if (!node.jobName || !node.opNames.length) {\n        // This op has no definition in any loaded repository (source asset).\n        // The best we can do is show the asset page. This will still be mostly empty,\n        // but there can be a description.\n        history.push(assetDetailsPathForKey(node.assetKey, {view: 'definition'}));\n        return;\n      }\n\n      const token = tokenForAssetKey(node.assetKey);\n      onChangeExplorerPath(\n        {...explorerPath, opNames: [token], opsQuery: '', pipelineName: node.jobName!},\n        'replace',\n      );\n    },\n    [explorerPath, history, onChangeExplorerPath],\n  );\n\n  return (\n    <GraphExplorerJobContext.Provider\n      value={{\n        sidebarTab: <SidebarPipelineOrJobOverview pipelineSelector={pipelineSelector} />,\n      }}\n    >\n      <PipelineExplorerContainer\n        repoAddress={repoAddress}\n        explorerPath={explorerPath}\n        onChangeExplorerPath={onChangeExplorerPath}\n        onNavigateToForeignNode={onNavigateToForeignNode}\n      />\n    </GraphExplorerJobContext.Provider>\n  );\n};\n","import * as React from 'react';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\n\nimport {JobLaunchpad} from '../launchpad/LaunchpadRoot';\nimport {LaunchpadSetupFromRunRoot} from '../launchpad/LaunchpadSetupFromRunRoot';\nimport {LaunchpadSetupRoot} from '../launchpad/LaunchpadSetupRoot';\nimport {PipelineNav} from '../nav/PipelineNav';\nimport {PipelinePartitionsRoot} from '../partitions/PipelinePartitionsRoot';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PipelineOrJobDisambiguationRoot} from './PipelineOrJobDisambiguationRoot';\nimport {PipelineOverviewRoot} from './PipelineOverviewRoot';\nimport {PipelineRunsRoot} from './PipelineRunsRoot';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <PipelineNav repoAddress={repoAddress} />\n      <Switch>\n        <Route path=\"/workspace/:repoPath/pipeline_or_job/:pipelinePath/(/?.*)\">\n          <PipelineOrJobDisambiguationRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/playground/setup',\n            '/workspace/:repoPath/jobs/:pipelinePath/playground/setup',\n          ]}\n        >\n          <LaunchpadSetupRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/playground/setup-from-run/:runId',\n            '/workspace/:repoPath/jobs/:pipelinePath/playground/setup-from-run/:runId',\n          ]}\n        >\n          <LaunchpadSetupFromRunRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/playground',\n            '/workspace/:repoPath/jobs/:pipelinePath/playground',\n          ]}\n        >\n          <JobLaunchpad repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/runs/:runId',\n            '/workspace/:repoPath/jobs/:pipelinePath/runs/:runId',\n          ]}\n          render={(props: RouteComponentProps<{runId: string}>) => (\n            <Redirect to={`/instance/runs/${props.match.params.runId}`} />\n          )}\n        />\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/runs',\n            '/workspace/:repoPath/jobs/:pipelinePath/runs',\n          ]}\n        >\n          <PipelineRunsRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/partitions',\n            '/workspace/:repoPath/jobs/:pipelinePath/partitions',\n          ]}\n        >\n          <PipelinePartitionsRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/overview',\n            '/workspace/:repoPath/jobs/:pipelinePath/overview',\n          ]}\n          render={(props) => (\n            <Redirect to={`/workspace/${props.match.url.replace(/\\/overview$/i, '')}`} />\n          )}\n        />\n        <Route path={['/workspace/:repoPath/pipelines/(/?.*)', '/workspace/:repoPath/jobs/(/?.*)']}>\n          <PipelineOverviewRoot repoAddress={repoAddress} />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n","import {Colors} from '@dagster-io/ui';\nimport {ActiveElement, TimeUnit, TooltipItem} from 'chart.js';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport {InstigationTickStatus} from '../types/globalTypes';\n\nimport {\n  TickHistoryQuery_instigationStateOrError_InstigationState_nextTick,\n  TickHistoryQuery_instigationStateOrError_InstigationState_ticks,\n} from './types/TickHistoryQuery';\n\ntype FutureTick = TickHistoryQuery_instigationStateOrError_InstigationState_nextTick;\ntype InstigationTick = TickHistoryQuery_instigationStateOrError_InstigationState_ticks;\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.Blue500,\n  [InstigationTickStatus.FAILURE]: Colors.Red500,\n  [InstigationTickStatus.STARTED]: Colors.Gray400,\n  [InstigationTickStatus.SKIPPED]: Colors.Yellow500,\n};\n\nconst REFRESH_INTERVAL = 100;\n\nexport const LiveTickTimeline: React.FC<{\n  ticks: InstigationTick[];\n  nextTick: FutureTick | null;\n  onHoverTick: (InstigationTick?: any) => void;\n  onSelectTick: (InstigationTick?: any) => void;\n}> = ({ticks, nextTick, onHoverTick, onSelectTick}) => {\n  const [now, setNow] = React.useState<number>(Date.now());\n  const [graphNow, setGraphNow] = React.useState<number>(Date.now());\n  const [isPaused, setPaused] = React.useState<boolean>(false);\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      !isPaused && setNow(Date.now());\n    }, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  });\n\n  React.useEffect(() => {\n    if (!isPaused && (!nextTick || now < 1000 * nextTick.timestamp)) {\n      setGraphNow(now);\n    }\n  }, [isPaused, nextTick, now]);\n\n  const isAtFutureTick = nextTick && 1000 * nextTick.timestamp <= now;\n  const PULSE_DURATION = 2000;\n  const nextTickRadius = isAtFutureTick\n    ? 4 + Math.sin((2 * Math.PI * (now % PULSE_DURATION)) / PULSE_DURATION)\n    : 3;\n\n  const tickData = ticks.map((tick) => ({x: 1000 * tick.timestamp, y: 0}));\n  const tickColors = ticks.map((tick) => COLOR_MAP[tick.status]);\n  const tickRadii = Array(ticks.length).fill(3);\n\n  if (nextTick) {\n    tickData.push({x: 1000 * nextTick.timestamp, y: 0});\n    tickColors.push(Colors.Gray200);\n    tickRadii.push(nextTickRadius);\n  }\n\n  const graphData = {\n    labels: ['ticks'],\n    datasets: [\n      {\n        label: 'now',\n        data: [\n          {x: graphNow - 60000 * 10, y: 0},\n          {x: graphNow, y: 0},\n        ],\n        borderColor: Colors.Gray100,\n        borderWidth: 1,\n        pointBorderWidth: 2,\n        pointBorderColor: Colors.Gray200,\n        pointRadius: 1,\n        pointHoverRadius: 1,\n      },\n      {\n        label: 'ticks',\n        data: tickData,\n        borderColor: Colors.Gray100,\n        borderWidth: 0,\n        backgroundColor: 'rgba(0,0,0,0)',\n        pointBackgroundColor: 'rgba(0,0,0,0)',\n        pointBorderWidth: 2,\n        pointBorderColor: tickColors,\n        pointRadius: tickRadii,\n        pointHoverBorderWidth: 2,\n        pointHoverRadius: 5,\n        pointHoverBorderColor: tickColors,\n      },\n    ],\n  };\n\n  const options = {\n    animation: {\n      duration: 0,\n    },\n\n    scales: {\n      y: {id: 'y', display: false, grid: {display: false}, title: {display: false}},\n      x: {\n        id: 'x',\n        type: 'time',\n        title: {\n          display: false,\n        },\n        grid: {display: true},\n        bounds: 'ticks',\n        min: graphNow - 60000 * 5, // 5 minutes ago\n        max: graphNow + 60000, // 1 minute from now\n        time: {\n          minUnit: 'minute' as TimeUnit,\n        },\n      },\n    },\n\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        displayColors: false,\n        callbacks: {\n          label(tooltipItem: TooltipItem<any>) {\n            if (!tooltipItem.datasetIndex) {\n              // this is the current time\n              return 'Current time';\n            }\n            if (tooltipItem.dataIndex === undefined) {\n              return '';\n            }\n            if (tooltipItem.dataIndex === ticks.length) {\n              // This is the future tick\n              return '';\n            }\n            const tick = ticks[tooltipItem.dataIndex];\n            const cursorLabel = tick.cursor ? `Cursor: ${tick.cursor}\\n` : '';\n\n            // returning an array of strings ensures that each string is displayed on its own line\n            // in the tooltip\n\n            if (tick.status === InstigationTickStatus.SKIPPED && tick.skipReason) {\n              return cursorLabel ? [tick.skipReason, cursorLabel] : tick.skipReason;\n            }\n            if (tick.status === InstigationTickStatus.SUCCESS && tick.runIds.length) {\n              return cursorLabel ? [...tick.runIds, cursorLabel] : tick.runIds;\n            }\n            if (tick.status === InstigationTickStatus.SUCCESS && tick.originRunIds) {\n              return cursorLabel ? [...tick.originRunIds, cursorLabel] : tick.originRunIds;\n            }\n            if (tick.status === InstigationTickStatus.FAILURE && tick.error?.message) {\n              return cursorLabel ? [tick.error.message, cursorLabel] : tick.error.message;\n            }\n            return cursorLabel;\n          },\n        },\n      },\n    },\n\n    onClick: (_event: MouseEvent, activeElements: any[]) => {\n      if (!activeElements.length) {\n        return;\n      }\n      const [item] = activeElements;\n      if (item.datasetIndex === undefined || item.index === undefined) {\n        return;\n      }\n      const tick = ticks[item.index];\n      onSelectTick(tick);\n    },\n\n    onHover: (event: MouseEvent, elements: ActiveElement[]) => {\n      if (event?.target instanceof HTMLElement) {\n        event.target.style.cursor = elements.length ? 'pointer' : 'default';\n      }\n      if (elements.length && !isPaused) {\n        setPaused(true);\n        const [element] = elements.filter(\n          (x) => x.datasetIndex === 1 && x.index !== undefined && x.index < ticks.length,\n        );\n        if (!element) {\n          return;\n        }\n        const tick = ticks[element.index];\n        onHoverTick(tick);\n      } else if (!elements.length && isPaused) {\n        setPaused(false);\n        onHoverTick(undefined);\n      }\n    },\n\n    maintainAspectRatio: false,\n  };\n\n  return <Line type=\"line\" data={graphData} height={150} options={options} key=\"100%\" />;\n};\n","import {gql, useQuery} from '@apollo/client';\nimport 'chartjs-adapter-date-fns';\nimport {Button, DialogBody, DialogFooter, Dialog, Group, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {copyValue} from '../app/DomUtils';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {InstigationSelector, InstigationTickStatus} from '../types/globalTypes';\n\nimport {FailedRunList, RunList, TickTag, TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {SelectedTickQuery, SelectedTickQueryVariables} from './types/SelectedTickQuery';\n\nexport const TickDetailsDialog: React.FC<{\n  timestamp: number | undefined;\n  instigationSelector: InstigationSelector;\n  onClose: () => void;\n}> = ({timestamp, instigationSelector, onClose}) => {\n  const {data} = useQuery<SelectedTickQuery, SelectedTickQueryVariables>(JOB_SELECTED_TICK_QUERY, {\n    variables: {instigationSelector, timestamp: timestamp || 0},\n    fetchPolicy: 'cache-and-network',\n    skip: !timestamp,\n    partialRefetch: true,\n  });\n\n  const tick =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick\n      : undefined;\n\n  return (\n    <Dialog\n      isOpen={!!tick}\n      onClose={onClose}\n      style={{\n        width: tick && tick.status === InstigationTickStatus.SKIPPED ? '50vw' : '90vw',\n      }}\n      title={tick ? <TimestampDisplay timestamp={tick.timestamp} /> : null}\n    >\n      {tick ? (\n        <DialogBody>\n          {tick.status === InstigationTickStatus.SUCCESS ? (\n            tick.runIds.length ? (\n              <RunList runIds={tick.runIds} />\n            ) : (\n              <FailedRunList originRunIds={tick.originRunIds} />\n            )\n          ) : null}\n          {tick.status === InstigationTickStatus.SKIPPED ? (\n            <Group direction=\"row\" spacing={16}>\n              <TickTag tick={tick} />\n              <span>{tick.skipReason || 'No skip reason provided'}</span>\n            </Group>\n          ) : tick.status === InstigationTickStatus.FAILURE && tick.error ? (\n            <PythonErrorInfo error={tick.error} />\n          ) : undefined}\n        </DialogBody>\n      ) : null}\n      <DialogFooter>\n        <Button\n          icon={<Icon name=\"copy_to_clipboard\" />}\n          onClick={(e) => copyValue(e, window.location.href)}\n        >\n          Copy Link\n        </Button>\n        <Button intent=\"primary\" onClick={onClose}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst JOB_SELECTED_TICK_QUERY = gql`\n  query SelectedTickQuery($instigationSelector: InstigationSelector!, $timestamp: Float!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        tick(timestamp: $timestamp) {\n          id\n          status\n          timestamp\n          skipReason\n          runIds\n          originRunIds\n          error {\n            ...PythonErrorFragment\n          }\n          ...TickTagFragment\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n","import 'chartjs-adapter-date-fns';\n\nimport {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Checkbox,\n  Colors,\n  CursorHistoryControls,\n  NonIdealState,\n  Spinner,\n  Table,\n  Subheading,\n  FontFamily,\n  Icon,\n  IconWrapper,\n} from '@dagster-io/ui';\nimport {Chart} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {SharedToaster} from '../app/DomUtils';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {ONE_MONTH, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {InstigationTickStatus, InstigationType} from '../types/globalTypes';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {TickTag, TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {RunStatusLink, RUN_STATUS_FRAGMENT} from './InstigationUtils';\nimport {LiveTickTimeline} from './LiveTickTimeline';\nimport {TickDetailsDialog} from './TickDetailsDialog';\nimport {RunStatusFragment} from './types/RunStatusFragment';\nimport {\n  TickHistoryQuery,\n  TickHistoryQueryVariables,\n  TickHistoryQuery_instigationStateOrError_InstigationState_ticks,\n} from './types/TickHistoryQuery';\n\nChart.register(zoomPlugin);\n\ntype InstigationTick = TickHistoryQuery_instigationStateOrError_InstigationState_ticks;\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nconst PAGE_SIZE = 25;\ninterface ShownStatusState {\n  [InstigationTickStatus.SUCCESS]: boolean;\n  [InstigationTickStatus.FAILURE]: boolean;\n  [InstigationTickStatus.STARTED]: boolean;\n  [InstigationTickStatus.SKIPPED]: boolean;\n}\n\nconst DEFAULT_SHOWN_STATUS_STATE = {\n  [InstigationTickStatus.SUCCESS]: true,\n  [InstigationTickStatus.FAILURE]: true,\n  [InstigationTickStatus.STARTED]: true,\n  [InstigationTickStatus.SKIPPED]: false,\n};\nconst STATUS_TEXT_MAP = {\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.STARTED]: 'Started',\n  [InstigationTickStatus.SKIPPED]: 'Skipped',\n};\n\nexport const TicksTable = ({\n  name,\n  repoAddress,\n  tabs,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n}) => {\n  const [shownStates, setShownStates] = useQueryPersistedState<ShownStatusState>({\n    encode: (states) => {\n      const queryState = {};\n      Object.keys(states).map((state) => {\n        queryState[state.toLowerCase()] = String(states[state]);\n      });\n      return queryState;\n    },\n    decode: (queryState) => {\n      const status: ShownStatusState = {...DEFAULT_SHOWN_STATUS_STATE};\n      Object.keys(DEFAULT_SHOWN_STATUS_STATE).forEach((state) => {\n        if (state.toLowerCase() in queryState) {\n          status[state] = !(queryState[state.toLowerCase()] === 'false');\n        }\n      });\n\n      return status;\n    },\n  });\n  const copyToClipboard = useCopyToClipboard();\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const statuses = Object.keys(shownStates)\n    .filter((status) => shownStates[status])\n    .map((status) => status as InstigationTickStatus);\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    TickHistoryQuery,\n    TickHistoryQueryVariables\n  >({\n    nextCursorForResult: (data) => {\n      if (data.instigationStateOrError.__typename !== 'InstigationState') {\n        return undefined;\n      }\n      return data.instigationStateOrError.ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.instigationStateOrError.__typename !== 'InstigationState') {\n        return [];\n      }\n      return data.instigationStateOrError.ticks;\n    },\n    variables: {\n      instigationSelector,\n      statuses,\n    },\n    query: JOB_TICK_HISTORY_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n  const {data} = queryResult;\n\n  if (!data || data.instigationStateOrError.__typename === 'PythonError') {\n    return null;\n  }\n\n  const {ticks, instigationType} = data.instigationStateOrError;\n\n  if (!ticks.length && statuses.length === Object.keys(DEFAULT_SHOWN_STATUS_STATE).length) {\n    return null;\n  }\n\n  const StatusFilter = ({status}: {status: InstigationTickStatus}) => (\n    <Checkbox\n      label={STATUS_TEXT_MAP[status]}\n      checked={shownStates[status]}\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        setShownStates({...shownStates, [status]: e.target.checked});\n      }}\n    />\n  );\n\n  return (\n    <>\n      <Box margin={{vertical: 8, horizontal: 24}}>\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          {tabs}\n          <Box flex={{direction: 'row', gap: 16}}>\n            <StatusFilter status={InstigationTickStatus.STARTED} />\n            <StatusFilter status={InstigationTickStatus.SUCCESS} />\n            <StatusFilter status={InstigationTickStatus.FAILURE} />\n            <StatusFilter status={InstigationTickStatus.SKIPPED} />\n          </Box>\n        </Box>\n      </Box>\n      {ticks.length ? (\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Timestamp</th>\n              <th style={{width: 90}}>Status</th>\n              {instigationType === InstigationType.SENSOR ? (\n                <th style={{width: 120}}>Cursor</th>\n              ) : null}\n              <th style={{width: 180}}>Runs</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ticks.map((tick) => (\n              <tr key={tick.id}>\n                <td>\n                  <TimestampDisplay\n                    timestamp={tick.timestamp}\n                    timeFormat={{showTimezone: false, showSeconds: true}}\n                  />\n                </td>\n                <td>\n                  <TickTag tick={tick} />\n                </td>\n                {instigationType === InstigationType.SENSOR ? (\n                  <td style={{width: 120}}>\n                    {tick.cursor ? (\n                      <Box flex={{direction: 'row', alignItems: 'center'}}>\n                        <Box style={{fontFamily: FontFamily.monospace, marginRight: 10}}>\n                          <>{truncate(tick.cursor || '')}</>\n                        </Box>\n                        <CopyButton\n                          onClick={() => {\n                            copyToClipboard(tick.cursor || '');\n                            SharedToaster.show({\n                              message: <div>Copied value</div>,\n                              intent: 'success',\n                            });\n                          }}\n                        >\n                          <Icon name=\"assignment\" />\n                        </CopyButton>\n                      </Box>\n                    ) : (\n                      <>&mdash;</>\n                    )}\n                  </td>\n                ) : null}\n                <td>\n                  {tick.runIds.length ? (\n                    tick.runs.map((run: RunStatusFragment) => (\n                      <>\n                        <RunStatusLink key={run.id} run={run} />\n                      </>\n                    ))\n                  ) : (\n                    <>&mdash;</>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      ) : (\n        <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n        </Box>\n      )}\n      {ticks.length > 0 ? (\n        <div style={{marginTop: '16px'}}>\n          <CursorHistoryControls {...paginationProps} />\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport const TickHistoryTimeline = ({\n  name,\n  repoAddress,\n  onHighlightRunIds,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds?: (runIds: string[]) => void;\n}) => {\n  const [selectedTime, setSelectedTime] = useQueryPersistedState<number | undefined>({\n    encode: (timestamp) => ({time: timestamp}),\n    decode: (qs) => (qs['time'] ? Number(qs['time']) : undefined),\n  });\n\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const queryResult = useQuery<TickHistoryQuery, TickHistoryQueryVariables>(\n    JOB_TICK_HISTORY_QUERY,\n    {\n      variables: {instigationSelector, limit: 15},\n      fetchPolicy: 'cache-and-network',\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, pollingPaused ? ONE_MONTH : 1000);\n  const {data} = queryResult;\n\n  if (!data) {\n    return (\n      <>\n        <Box\n          padding={{top: 16, horizontal: 24}}\n          border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        >\n          <Subheading>Recent ticks</Subheading>\n        </Box>\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  const {ticks, nextTick} = data.instigationStateOrError;\n\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTime(tick ? tick.timestamp : undefined);\n  };\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      onHighlightRunIds && onHighlightRunIds(tick.runIds);\n      pausePolling(true);\n    }\n  };\n\n  return (\n    <>\n      <TickDetailsDialog\n        timestamp={selectedTime}\n        instigationSelector={instigationSelector}\n        onClose={() => onTickClick(undefined)}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Recent ticks</Subheading>\n      </Box>\n      <Box border={{side: 'top', width: 1, color: Colors.KeylineGray}}>\n        <LiveTickTimeline\n          ticks={ticks}\n          nextTick={nextTick}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n        />\n      </Box>\n    </>\n  );\n};\n\nconst JOB_TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery(\n    $instigationSelector: InstigationSelector!\n    $dayRange: Int\n    $limit: Int\n    $cursor: String\n    $statuses: [InstigationTickStatus!]\n  ) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        instigationType\n        nextTick {\n          timestamp\n        }\n        ticks(dayRange: $dayRange, limit: $limit, cursor: $cursor, statuses: $statuses) {\n          id\n          status\n          timestamp\n          cursor\n          skipReason\n          runIds\n          runs {\n            id\n            status\n            ...RunStatusFragment\n          }\n          originRunIds\n          error {\n            ...PythonErrorFragment\n          }\n          ...TickTagFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_STATUS_FRAGMENT}\n`;\n\nconst CopyButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 8px;\n  margin: -6px;\n  outline: none;\n\n  ${IconWrapper} {\n    background-color: ${Colors.Gray600};\n    transition: background-color 100ms;\n  }\n\n  :hover ${IconWrapper} {\n    background-color: ${Colors.Gray800};\n  }\n\n  :focus ${IconWrapper} {\n    background-color: ${Colors.Link};\n  }\n`;\n","import {\n  Box,\n  ButtonLink,\n  Colors,\n  Group,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Code,\n  Heading,\n  Mono,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {InstigationStatus, InstigationType} from '../types/globalTypes';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SchedulePartitionStatus} from './SchedulePartitionStatus';\nimport {ScheduleSwitch} from './ScheduleSwitch';\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {humanCronString} from './humanCronString';\nimport {ScheduleFragment} from './types/ScheduleFragment';\n\nconst TIME_FORMAT = {showSeconds: false, showTimezone: true};\n\nexport const ScheduleDetails: React.FC<{\n  schedule: ScheduleFragment;\n  repoAddress: RepoAddress;\n  refreshState: QueryRefreshState;\n}> = (props) => {\n  const {repoAddress, schedule, refreshState} = props;\n  const {cronSchedule, executionTimezone, futureTicks, name, partitionSet, pipelineName} = schedule;\n  const copyToClipboard = useCopyToClipboard();\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  const [copyText, setCopyText] = React.useState('Click to copy');\n\n  // Restore the tooltip text after a delay.\n  React.useEffect(() => {\n    let token: any;\n    if (copyText === 'Copied!') {\n      token = setTimeout(() => {\n        setCopyText('Click to copy');\n      }, 2000);\n    }\n    return () => {\n      token && clearTimeout(token);\n    };\n  }, [copyText]);\n\n  const {scheduleState} = schedule;\n  const {status, id, ticks} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n\n  const copyId = () => {\n    copyToClipboard(id);\n    setCopyText('Copied!');\n  };\n\n  const running = status === InstigationStatus.RUNNING;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n            <Heading>{name}</Heading>\n            <ScheduleSwitch repoAddress={repoAddress} schedule={schedule} />\n          </Box>\n        }\n        tags={\n          <>\n            <Tag icon=\"schedule\">\n              Schedule in <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {futureTicks.results.length && running ? (\n              <Tag icon=\"timer\">\n                Next tick:{' '}\n                <TimestampDisplay\n                  timestamp={futureTicks.results[0].timestamp}\n                  timezone={executionTimezone}\n                  timeFormat={TIME_FORMAT}\n                />\n              </Tag>\n            ) : null}\n            <Box flex={{display: 'inline-flex'}} margin={{top: 2}}>\n              <Tooltip content={copyText}>\n                <ButtonLink color={{link: Colors.Gray400, hover: Colors.Gray600}} onClick={copyId}>\n                  <Mono>{`id: ${id.slice(0, 8)}`}</Mono>\n                </ButtonLink>\n              </Tooltip>\n            </Box>\n          </>\n        }\n        right={<QueryRefreshCountdown refreshState={refreshState} />}\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {schedule.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{schedule.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                  <TimestampDisplay\n                    timestamp={latestTick.timestamp}\n                    timezone={executionTimezone}\n                    timeFormat={TIME_FORMAT}\n                  />\n                  <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n                </Group>\n              ) : (\n                'Schedule has never run'\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>{isJob ? 'Job' : 'Pipeline'}</td>\n            <td>\n              <PipelineReference\n                pipelineName={pipelineName}\n                pipelineHrefContext={repoAddress}\n                isJob={isJob}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>Partition set</td>\n            <td>\n              {partitionSet ? (\n                <SchedulePartitionStatus schedule={schedule} repoAddress={repoAddress} />\n              ) : (\n                'None'\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Schedule</td>\n            <td>\n              {cronSchedule ? (\n                <Group direction=\"row\" spacing={8}>\n                  <span>{humanCronString(cronSchedule, executionTimezone || 'UTC')}</span>\n                  <Code>({cronSchedule})</Code>\n                </Group>\n              ) : (\n                <div>&mdash;</div>\n              )}\n            </td>\n          </tr>\n          {executionTimezone ? (\n            <tr>\n              <td>Execution timezone</td>\n              <td>{executionTimezone}</td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Tabs, Tab, Page, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TicksTable} from '../instigation/TickHistory';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {ScheduleDetails} from './ScheduleDetails';\nimport {SCHEDULE_FRAGMENT} from './ScheduleUtils';\nimport {SchedulerInfo} from './SchedulerInfo';\nimport {\n  PreviousRunsForScheduleQuery,\n  PreviousRunsForScheduleQueryVariables,\n} from './types/PreviousRunsForScheduleQuery';\nimport {\n  ScheduleRootQuery,\n  ScheduleRootQueryVariables,\n  ScheduleRootQuery_scheduleOrError_Schedule as Schedule,\n} from './types/ScheduleRootQuery';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const ScheduleRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const {scheduleName} = useParams<{scheduleName: string}>();\n\n  useDocumentTitle(`Schedule: ${scheduleName}`);\n\n  const scheduleSelector = {\n    ...repoAddressToSelector(repoAddress),\n    scheduleName,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState<string>('ticks');\n\n  const queryResult = useQuery<ScheduleRootQuery, ScheduleRootQueryVariables>(SCHEDULE_ROOT_QUERY, {\n    variables: {\n      scheduleSelector,\n    },\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const tabs = (\n    <Tabs selectedTabId={selectedTab} onChange={setSelectedTab}>\n      <Tab id=\"ticks\" title=\"Tick history\" />\n      <Tab id=\"runs\" title=\"Run history\" />\n    </Tabs>\n  );\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {({scheduleOrError, instance}) => {\n        if (scheduleOrError.__typename !== 'Schedule') {\n          return null;\n        }\n\n        const showDaemonWarning = !instance.daemonHealth.daemonStatus.healthy;\n\n        return (\n          <Page>\n            <ScheduleDetails\n              repoAddress={repoAddress}\n              schedule={scheduleOrError}\n              refreshState={refreshState}\n            />\n            {showDaemonWarning ? (\n              <Box padding={{vertical: 16, horizontal: 24}}>\n                <SchedulerInfo daemonHealth={instance.daemonHealth} />\n              </Box>\n            ) : null}\n            {selectedTab === 'ticks' ? (\n              <TicksTable tabs={tabs} repoAddress={repoAddress} name={scheduleOrError.name} />\n            ) : (\n              <SchedulePreviousRuns\n                repoAddress={repoAddress}\n                schedule={scheduleOrError}\n                tabs={tabs}\n              />\n            )}\n          </Page>\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport const SchedulePreviousRuns: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: Schedule;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}> = ({schedule, highlightedIds, tabs}) => {\n  const queryResult = useQuery<PreviousRunsForScheduleQuery, PreviousRunsForScheduleQueryVariables>(\n    PREVIOUS_RUNS_FOR_SCHEDULE_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        limit: 20,\n        filter: {\n          pipelineName: schedule.pipelineName,\n          tags: [{key: DagsterTag.ScheduleName, value: schedule.name}],\n        },\n      },\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  if (!data) {\n    return null;\n  } else if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n\n  const runs = data?.pipelineRunsOrError.results;\n  return <RunTable actionBarComponents={tabs} runs={runs} highlightedIds={highlightedIds} />;\n};\n\nconst SCHEDULE_ROOT_QUERY = gql`\n  query ScheduleRootQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        ...ScheduleFragment\n      }\n      ... on ScheduleNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"SCHEDULE\") {\n          id\n          healthy\n        }\n      }\n    }\n  }\n\n  ${SCHEDULE_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst PREVIOUS_RUNS_FOR_SCHEDULE_QUERY = gql`\n  query PreviousRunsForScheduleQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      __typename\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n      ... on Error {\n        message\n      }\n    }\n  }\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Group, NonIdealState, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  PreviousRunsForSensorQuery,\n  PreviousRunsForSensorQueryVariables,\n} from './types/PreviousRunsForSensorQuery';\nimport {SensorFragment} from './types/SensorFragment';\n\nconst RUNS_LIMIT = 20;\n\nexport const SensorPreviousRuns: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}> = ({sensor, highlightedIds, tabs}) => {\n  const {data} = useQuery<PreviousRunsForSensorQuery, PreviousRunsForSensorQueryVariables>(\n    PREVIOUS_RUNS_FOR_SENSOR_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        limit: RUNS_LIMIT,\n        filter: {\n          pipelineName: sensor.targets?.length === 1 ? sensor.targets[0].pipelineName : undefined,\n          tags: [{key: DagsterTag.SensorName, value: sensor.name}],\n        },\n      },\n    },\n  );\n\n  if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n    return null;\n  }\n\n  const runs = data?.pipelineRunsOrError.results;\n  return <RunTable actionBarComponents={tabs} runs={runs} highlightedIds={highlightedIds} />;\n};\n\nexport const NoTargetSensorPreviousRuns: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  highlightedIds: string[];\n}> = () => {\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'bottom', width: 1, color: Colors.Gray100}}\n        flex={{direction: 'row'}}\n      >\n        <Subheading>Latest runs</Subheading>\n      </Box>\n      <div style={{color: Colors.Gray400}}>\n        <Box margin={{vertical: 64}}>\n          <NonIdealState\n            icon=\"sensors\"\n            title=\"No runs to display\"\n            description=\"This sensor does not target a pipeline or job.\"\n          />\n        </Box>\n      </div>\n    </Group>\n  );\n};\n\nconst PREVIOUS_RUNS_FOR_SENSOR_QUERY = gql`\n  query PreviousRunsForSensorQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      __typename\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n    }\n  }\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Tab, Tabs, Page} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TicksTable, TickHistoryTimeline} from '../instigation/TickHistory';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPreviousRuns} from './SensorPreviousRuns';\nimport {SensorRootQuery, SensorRootQueryVariables} from './types/SensorRootQuery';\n\nexport const SensorRoot: React.FC<{repoAddress: RepoAddress}> = ({repoAddress}) => {\n  useTrackPageView();\n\n  const {sensorName} = useParams<{sensorName: string}>();\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState<string>('ticks');\n  const queryResult = useQuery<SensorRootQuery, SensorRootQueryVariables>(SENSOR_ROOT_QUERY, {\n    variables: {sensorSelector},\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const tabs = (\n    <Tabs selectedTabId={selectedTab} onChange={setSelectedTab}>\n      <Tab id=\"ticks\" title=\"Tick history\" />\n      <Tab id=\"runs\" title=\"Run history\" />\n    </Tabs>\n  );\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {({sensorOrError, instance}) => {\n        if (sensorOrError.__typename !== 'Sensor') {\n          return null;\n        }\n        const showDaemonWarning = !instance.daemonHealth.daemonStatus.healthy;\n\n        return (\n          <Page>\n            <SensorDetails\n              repoAddress={repoAddress}\n              sensor={sensorOrError}\n              daemonHealth={instance.daemonHealth.daemonStatus.healthy}\n              refreshState={refreshState}\n            />\n            {showDaemonWarning ? (\n              <Box padding={{vertical: 16, horizontal: 24}}>\n                <SensorInfo daemonHealth={instance.daemonHealth} />\n              </Box>\n            ) : null}\n            <TickHistoryTimeline repoAddress={repoAddress} name={sensorOrError.name} />\n            {selectedTab === 'ticks' ? (\n              <TicksTable tabs={tabs} repoAddress={repoAddress} name={sensorOrError.name} />\n            ) : (\n              <SensorPreviousRuns repoAddress={repoAddress} sensor={sensorOrError} tabs={tabs} />\n            )}\n          </Page>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      __typename\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n    }\n    instance {\n      ...InstanceHealthFragment\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n        }\n      }\n    }\n  }\n  ${SENSOR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, PageHeader, Tag, Heading} from '@dagster-io/ui';\nimport React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {\n  GraphExplorer,\n  GraphExplorerOptions,\n  GRAPH_EXPLORER_FRAGMENT,\n  GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT,\n} from '../pipelines/GraphExplorer';\nimport {explorerPathFromString, explorerPathToString} from '../pipelines/PipelinePathUtils';\nimport {Loading} from '../ui/Loading';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {RepoAddress} from './types';\nimport {\n  GraphExplorerRootQuery,\n  GraphExplorerRootQueryVariables,\n} from './types/GraphExplorerRootQuery';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const GraphRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const params = useParams();\n\n  const path = explorerPathFromString(params[0]);\n\n  // Show the name of the composite solid we are within (-1 is the selection, -2 is current parent)\n  // or the name of the pipeline tweaked to look a bit more like a graph name.\n  const title = path.opNames.length > 1 ? path.opNames[path.opNames.length - 2] : path.pipelineName;\n  useDocumentTitle(`Graph: ${title}`);\n\n  return (\n    <div style={{height: '100%', display: 'flex', flexDirection: 'column'}}>\n      <PageHeader\n        title={<Heading>{title}</Heading>}\n        tags={\n          <Tag icon=\"schema\">\n            Graph in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n      />\n      <Box\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n        style={{minHeight: 0, flex: 1, display: 'flex'}}\n      >\n        <GraphExplorerRoot repoAddress={repoAddress} />\n      </Box>\n    </div>\n  );\n};\n\nconst GraphExplorerRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const params = useParams();\n\n  const explorerPath = explorerPathFromString(params['0']);\n  const history = useHistory();\n  const [options, setOptions] = React.useState<GraphExplorerOptions>({\n    explodeComposites: false,\n    preferAssetRendering: true,\n  });\n\n  const parentNames = explorerPath.opNames.slice(0, explorerPath.opNames.length - 1);\n  const graphResult = useQuery<GraphExplorerRootQuery, GraphExplorerRootQueryVariables>(\n    GRAPH_EXPLORER_ROOT_QUERY,\n    {\n      variables: {\n        graphSelector: {\n          repositoryName: repoAddress?.name || '',\n          repositoryLocationName: repoAddress?.location || '',\n          graphName: explorerPath.pipelineName,\n        },\n        rootHandleID: parentNames.join('.'),\n        requestScopeHandleID: options.explodeComposites ? undefined : parentNames.join('.'),\n      },\n    },\n  );\n\n  return (\n    <Loading<GraphExplorerRootQuery> queryResult={graphResult}>\n      {({graphOrError: result}) => {\n        if (result.__typename === 'GraphNotFoundError') {\n          return (\n            <NonIdealState icon=\"error\" title=\"Graph not found\" description={result.message} />\n          );\n        }\n        if (result.__typename === 'PythonError') {\n          return <NonIdealState icon=\"error\" title=\"Query Error\" description={result.message} />;\n        }\n        const parentHandle = result.solidHandle;\n        const displayedHandles = options.explodeComposites\n          ? explodeCompositesInHandleGraph(result.solidHandles)\n          : result.solidHandles;\n\n        return (\n          <GraphExplorer\n            options={options}\n            setOptions={setOptions}\n            explorerPath={explorerPath}\n            onChangeExplorerPath={(path, mode) => {\n              const fullPath = workspacePathFromAddress(\n                props.repoAddress,\n                `/graphs/${explorerPathToString(path)}`,\n              );\n              if (mode === 'push') {\n                history.push(fullPath);\n              } else {\n                history.replace(fullPath);\n              }\n            }}\n            pipelineOrGraph={result}\n            repoAddress={repoAddress}\n            handles={displayedHandles}\n            parentHandle={parentHandle ? parentHandle : undefined}\n            isGraph={true}\n            getInvocations={(definitionName) =>\n              displayedHandles\n                .filter((s) => s.solid.definition.name === definitionName)\n                .map((s) => ({handleID: s.handleID}))\n            }\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst GRAPH_EXPLORER_ROOT_QUERY = gql`\n  query GraphExplorerRootQuery(\n    $graphSelector: GraphSelector\n    $rootHandleID: String!\n    $requestScopeHandleID: String\n  ) {\n    graphOrError(selector: $graphSelector) {\n      ... on Graph {\n        id\n        name\n        ...GraphExplorerFragment\n\n        solidHandle(handleID: $rootHandleID) {\n          ...GraphExplorerSolidHandleFragment\n        }\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n      }\n      ... on GraphNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${GRAPH_EXPLORER_FRAGMENT}\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Colors, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nexport const formatRepositoryUrl = (url: string): string => {\n  try {\n    const urlObj = new URL(url);\n    let org, repo, tag;\n    if (urlObj.host === 'github.com') {\n      [, org, repo, , tag] = urlObj.pathname.split('/', 7);\n    } else if (urlObj.host === 'gitlab.com') {\n      [, org, repo, , , tag] = urlObj.pathname.split('/', 8);\n    }\n    if (org && repo && tag) {\n      return `${org}/${repo}@${tag}`;\n    }\n  } catch (error) {\n    return url;\n  }\n  return url;\n};\n\nexport const RepositoryRemoteLocationLink: React.FC<{repositoryUrl: string}> = ({\n  repositoryUrl,\n}) => {\n  const formattedUrl = formatRepositoryUrl(repositoryUrl);\n\n  return (\n    <a href={repositoryUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n      <Icon\n        color={Colors.Link}\n        name=\"link\"\n        style={{display: 'inline-block', verticalAlign: 'middle'}}\n      />{' '}\n      {formattedUrl}\n    </a>\n  );\n};\n","import {\n  Box,\n  ButtonLink,\n  Colors,\n  Group,\n  NonIdealState,\n  Spinner,\n  Table,\n  Tag,\n  Caption,\n  Tooltip,\n} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {DISABLED_MESSAGE, usePermissions} from '../app/Permissions';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {ReloadRepositoryLocationButton} from '../nav/ReloadRepositoryLocationButton';\nimport {\n  buildReloadFnForLocation,\n  useRepositoryLocationReload,\n} from '../nav/useRepositoryLocationReload';\n\nimport {RepositoryLocationNonBlockingErrorDialog} from './RepositoryLocationErrorDialog';\nimport {RepositoryRemoteLocationLink} from './RepositoryRemoteLocationLink';\nimport {WorkspaceContext, WorkspaceRepositoryLocationNode} from './WorkspaceContext';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: true};\n\nconst LocationStatus: React.FC<{\n  location: string;\n  locationOrError: WorkspaceRepositoryLocationNode;\n}> = (props) => {\n  const {location, locationOrError} = props;\n  const [showDialog, setShowDialog] = React.useState(false);\n\n  const reloadFn = React.useMemo(() => buildReloadFnForLocation(location), [location]);\n  const {reloading, tryReload} = useRepositoryLocationReload({\n    scope: 'location',\n    reloadFn,\n  });\n\n  if (locationOrError.loadStatus === 'LOADING') {\n    if (locationOrError.locationOrLoadError) {\n      return (\n        <Tag minimal intent=\"primary\">\n          Updating...\n        </Tag>\n      );\n    } else {\n      return (\n        <Tag minimal intent=\"primary\">\n          Loading...\n        </Tag>\n      );\n    }\n  }\n\n  if (locationOrError.locationOrLoadError?.__typename === 'PythonError') {\n    return (\n      <>\n        <Box flex={{alignItems: 'center', gap: 12}}>\n          <Tag minimal intent=\"danger\">\n            Failed\n          </Tag>\n          <ButtonLink onClick={() => setShowDialog(true)}>\n            <span style={{fontSize: '14px'}}>View error</span>\n          </ButtonLink>\n        </Box>\n        <RepositoryLocationNonBlockingErrorDialog\n          location={location}\n          isOpen={showDialog}\n          error={locationOrError.locationOrLoadError}\n          reloading={reloading}\n          onDismiss={() => setShowDialog(false)}\n          onTryReload={() => tryReload()}\n        />\n      </>\n    );\n  }\n\n  return (\n    <Tag minimal intent=\"success\">\n      Loaded\n    </Tag>\n  );\n};\n\nconst ReloadButton: React.FC<{\n  location: string;\n}> = (props) => {\n  const {location} = props;\n  const {canReloadRepositoryLocation} = usePermissions();\n\n  if (!canReloadRepositoryLocation) {\n    return (\n      <Tooltip content={DISABLED_MESSAGE}>\n        <ButtonLink color={Colors.Gray400}>Reload</ButtonLink>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <ReloadRepositoryLocationButton location={location}>\n      {({reloading, tryReload}) => (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n          <ButtonLink onClick={() => tryReload()}>Reload</ButtonLink>\n          {reloading ? <Spinner purpose=\"body-text\" /> : null}\n        </Box>\n      )}\n    </ReloadRepositoryLocationButton>\n  );\n};\n\nexport const RepositoryLocationsList = () => {\n  const {locationEntries, loading} = React.useContext(WorkspaceContext);\n\n  if (loading && !locationEntries.length) {\n    return (\n      <Box flex={{gap: 8, alignItems: 'center'}} padding={{horizontal: 24}}>\n        <Spinner purpose=\"body-text\" />\n        <div>Loading...</div>\n      </Box>\n    );\n  }\n\n  if (!locationEntries.length) {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"folder\"\n          title=\"No repository locations\"\n          description=\"When you add a repository location to this workspace, it will appear here.\"\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Repository location</th>\n          <th>Status</th>\n          <th colSpan={2}>Updated</th>\n        </tr>\n      </thead>\n      <tbody>\n        {locationEntries.map((location) => (\n          <tr key={location.name}>\n            <td style={{maxWidth: '50%'}}>\n              <Group direction=\"column\" spacing={4}>\n                <strong>{location.name}</strong>\n                <div>\n                  {location.displayMetadata.map((metadata, idx) => {\n                    const name = metadata.key === 'url' ? 'source' : metadata.key;\n                    const display =\n                      metadata.key === 'url' ? (\n                        <RepositoryRemoteLocationLink repositoryUrl={metadata.value} />\n                      ) : (\n                        metadata.value\n                      );\n\n                    return (\n                      <div key={idx}>\n                        <Caption style={{wordBreak: 'break-word'}}>\n                          {`${name}: `}\n                          <span style={{color: Colors.Gray400}}>{display}</span>\n                        </Caption>\n                      </div>\n                    );\n                  })}\n                </div>\n              </Group>\n            </td>\n            <td>\n              <LocationStatus location={location.name} locationOrError={location} />\n            </td>\n            <td style={{whiteSpace: 'nowrap'}}>\n              <Timestamp timestamp={{unix: location.updatedTimestamp}} timeFormat={TIME_FORMAT} />\n            </td>\n            <td style={{width: '180px'}}>\n              <ReloadButton location={location.name} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n","import {\n  Box,\n  Colors,\n  Group,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Table,\n  Heading,\n  Subheading,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {LoadingSpinner} from '../ui/Loading';\n\nimport {ReloadAllButton} from './ReloadAllButton';\nimport {RepositoryLocationsList} from './RepositoryLocationsList';\nimport {useRepositoryOptions} from './WorkspaceContext';\nimport {buildRepoPath} from './buildRepoAddress';\nimport {workspacePath} from './workspacePath';\n\nexport const WorkspaceOverviewRoot = () => {\n  useTrackPageView();\n  const {loading, error, options} = useRepositoryOptions();\n\n  const content = () => {\n    if (loading) {\n      return <LoadingSpinner purpose=\"page\" />;\n    }\n\n    if (error) {\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"Error loading repositories\"\n            description=\"Could not load repositories in this workspace.\"\n          />\n        </Box>\n      );\n    }\n\n    if (!options.length) {\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"folder\"\n            title=\"No repositories\"\n            description=\"When you add a repository to this workspace, it will appear here.\"\n          />\n        </Box>\n      );\n    }\n\n    const anyPipelinesInWorkspace = options.some((option) =>\n      option.repository.pipelines.some((p) => !p.isJob),\n    );\n\n    return (\n      <Table>\n        <thead>\n          <tr>\n            <th>Repository</th>\n            <th>Assets</th>\n            <th>Jobs</th>\n            {anyPipelinesInWorkspace ? <th>Pipelines</th> : null}\n            <th>Graphs</th>\n            <th>Ops</th>\n            <th>Schedules</th>\n            <th>Sensors</th>\n          </tr>\n        </thead>\n        <tbody>\n          {options.map((repository) => {\n            const {\n              repository: {name, pipelines},\n              repositoryLocation: {name: location},\n            } = repository;\n            const repoString = buildRepoPath(name, location);\n            const anyPipelines = pipelines.some((pipelineOrJob) => !pipelineOrJob.isJob);\n            return (\n              <tr key={repoString}>\n                <td style={{width: '40%'}}>{repoString}</td>\n                <td>\n                  <Link to={workspacePath(name, location, '/assets')}>Assets</Link>\n                </td>\n                <td>\n                  <Link to={workspacePath(name, location, '/jobs')}>Jobs</Link>\n                </td>\n                {anyPipelinesInWorkspace ? (\n                  <td>\n                    {anyPipelines ? (\n                      <Link to={workspacePath(name, location, '/pipelines')}>Pipelines</Link>\n                    ) : (\n                      <span style={{color: Colors.Gray400}}>None</span>\n                    )}\n                  </td>\n                ) : null}\n                <td>\n                  <Link to={workspacePath(name, location, '/graphs')}>Graphs</Link>\n                </td>\n                <td>\n                  <Link to={workspacePath(name, location, '/ops')}>Ops</Link>\n                </td>\n                <td>\n                  <Link to={workspacePath(name, location, '/schedules')}>Schedules</Link>\n                </td>\n                <td>\n                  <Link to={workspacePath(name, location, '/sensors')}>Sensors</Link>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    );\n  };\n\n  return (\n    <Page>\n      <PageHeader title={<Heading>Workspace</Heading>} />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Group direction=\"row\" spacing={12} alignItems=\"center\">\n          <Subheading id=\"repository-locations\">Locations</Subheading>\n          <ReloadAllButton />\n        </Group>\n      </Box>\n      <Box padding={{bottom: 24}}>\n        <RepositoryLocationsList />\n      </Box>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading id=\"repository-locations\">Repositories</Subheading>\n      </Box>\n      {content()}\n    </Page>\n  );\n};\n","import {Alert, Box, NonIdealState, Page, PageHeader, Table, Heading} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, Redirect, useLocation, useParams, useRouteMatch} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {LoadingSpinner} from '../ui/Loading';\n\nimport {isThisThingAJob, optionToRepoAddress, useRepositoryOptions} from './WorkspaceContext';\nimport {buildRepoPath} from './buildRepoAddress';\nimport {findRepoContainingPipeline} from './findRepoContainingPipeline';\nimport {workspacePath, workspacePathFromAddress} from './workspacePath';\n\nexport const WorkspacePipelineRoot = () => {\n  useTrackPageView();\n\n  const params = useParams<{pipelinePath: string}>();\n  const {pipelinePath} = params;\n\n  const entireMatch = useRouteMatch(['/workspace/pipelines/(/?.*)', '/workspace/jobs/(/?.*)']);\n  const location = useLocation();\n\n  const toAppend = entireMatch!.params[0];\n  const {search} = location;\n\n  const {pipelineName} = explorerPathFromString(pipelinePath);\n  const {loading, options} = useRepositoryOptions();\n\n  if (loading) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n\n  const reposWithMatch = findRepoContainingPipeline(options, pipelineName);\n  if (reposWithMatch.length === 0) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"no-results\"\n          title=\"No matching jobs\"\n          description={\n            <div>\n              <div>\n                <strong>{pipelineName}</strong>\n              </div>\n              was not found in any repositories in this workspace.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  if (reposWithMatch.length === 1) {\n    const match = reposWithMatch[0];\n    const repoAddress = optionToRepoAddress(match);\n    const isJob = isThisThingAJob(match, pipelineName);\n    const to = workspacePathFromAddress(\n      repoAddress,\n      `/${isJob ? 'jobs' : 'pipelines'}/${toAppend}${search}`,\n    );\n    return <Redirect to={to} />;\n  }\n\n  const anyPipelines = reposWithMatch.some((repo) => !isThisThingAJob(repo, pipelineName));\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pipelineName}</Heading>}\n        icon=\"job\"\n        description={\n          anyPipelines ? 'Job / pipeline in multiple repositories' : 'Job in multiple repositories'\n        }\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Alert\n          intent=\"info\"\n          title={\n            <div>\n              {anyPipelines ? (\n                <>\n                  Jobs or pipelines named <strong>{pipelineName}</strong> were found in multiple\n                  repositories.\n                </>\n              ) : (\n                <>\n                  Jobs named <strong>{pipelineName}</strong> were found in multiple repositories.\n                </>\n              )}\n            </div>\n          }\n        />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th>Repository name and location</th>\n            <th>{anyPipelines ? 'Job / Pipeline' : 'Job'}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {reposWithMatch.map((repository) => {\n            const {\n              repository: {name},\n              repositoryLocation: {name: location},\n            } = repository;\n            const repoString = buildRepoPath(name, location);\n            return (\n              <tr key={repoString}>\n                <td style={{width: '40%'}}>{repoString}</td>\n                <td>\n                  <Link\n                    to={workspacePath(\n                      name,\n                      location,\n                      `/${\n                        isThisThingAJob(repository, pipelineName) ? 'jobs' : 'pipelines'\n                      }/${pipelineName}`,\n                    )}\n                  >\n                    {pipelineName}\n                  </Link>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Page>\n  );\n};\n","import {gql} from '@apollo/client';\nimport {Box} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {OpNode, OP_NODE_DEFINITION_FRAGMENT} from '../graph/OpNode';\nimport {layoutOp} from '../graph/asyncGraphLayout';\n\nimport {OpCardSolidDefinitionFragment} from './types/OpCardSolidDefinitionFragment';\n\ninterface OpCardProps {\n  definition: OpCardSolidDefinitionFragment;\n}\n\nexport const OpCard: React.FC<OpCardProps> = (props) => {\n  const {name, inputDefinitions, outputDefinitions} = props.definition;\n  const layout = layoutOp(\n    {\n      name,\n      inputs: inputDefinitions.map((d) => ({\n        definition: d,\n        dependsOn: [],\n      })),\n      outputs: outputDefinitions.map((d) => ({\n        definition: d,\n        dependedBy: [],\n      })),\n      definition: {\n        description: null,\n        assetNodes: [],\n      },\n    },\n    {x: 0, y: 0},\n  );\n\n  return (\n    <Box padding={24}>\n      <OpCardContainer style={{height: layout.bounds.height}}>\n        <OpNode\n          invocation={undefined}\n          definition={props.definition}\n          minified={false}\n          onClick={() => {}}\n          onDoubleClick={() => {}}\n          onEnterComposite={() => {}}\n          onHighlightEdges={() => {}}\n          layout={layout}\n          selected={false}\n          focused={false}\n          highlightedEdges={[]}\n          dim={false}\n        />\n      </OpCardContainer>\n    </Box>\n  );\n};\n\nexport const OP_CARD_SOLID_DEFINITION_FRAGMENT = gql`\n  fragment OpCardSolidDefinitionFragment on ISolidDefinition {\n    ...OpNodeDefinitionFragment\n    __typename\n    name\n    description\n    metadata {\n      key\n      value\n    }\n    inputDefinitions {\n      name\n    }\n    outputDefinitions {\n      name\n    }\n  }\n\n  ${OP_NODE_DEFINITION_FRAGMENT}\n`;\n\nconst OpCardContainer = styled.div`\n  flex: 1;\n  max-width: 450px;\n  position: relative;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {\n  SidebarOpDefinition,\n  SIDEBAR_SOLID_DEFINITION_FRAGMENT,\n} from '../pipelines/SidebarOpDefinition';\nimport {SidebarOpInvocationInfo} from '../pipelines/SidebarOpHelpers';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OpCard, OP_CARD_SOLID_DEFINITION_FRAGMENT} from './OpCard';\nimport {UsedSolidDetailsQuery, UsedSolidDetailsQueryVariables} from './types/UsedSolidDetailsQuery';\n\ninterface UsedSolidDetailsProps {\n  name: string;\n  onClickInvocation: (arg: SidebarOpInvocationInfo) => void;\n  repoAddress: RepoAddress;\n}\n\nexport const UsedSolidDetails: React.FC<UsedSolidDetailsProps> = (props) => {\n  const {name, onClickInvocation, repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<UsedSolidDetailsQuery, UsedSolidDetailsQueryVariables>(\n    USED_SOLID_DETAILS_QUERY,\n    {\n      variables: {\n        name,\n        repositorySelector,\n      },\n    },\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({repositoryOrError}) => {\n        if (!(repositoryOrError?.__typename === 'Repository' && repositoryOrError.usedSolid)) {\n          return null;\n        }\n        const usedSolid = repositoryOrError.usedSolid;\n        return (\n          <>\n            <OpCard definition={usedSolid.definition} />\n            <SidebarOpDefinition\n              definition={usedSolid.definition}\n              showingSubgraph={false}\n              onClickInvocation={onClickInvocation}\n              getInvocations={() => {\n                return usedSolid.invocations.map((i) => ({\n                  handleID: i.solidHandle.handleID,\n                  pipelineName: i.pipeline.name,\n                }));\n              }}\n            />\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst USED_SOLID_DETAILS_QUERY = gql`\n  query UsedSolidDetailsQuery($name: String!, $repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        usedSolid(name: $name) {\n          __typename\n          definition {\n            ...OpCardSolidDefinitionFragment\n            ...SidebarOpDefinitionFragment\n          }\n          invocations {\n            __typename\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${OP_CARD_SOLID_DEFINITION_FRAGMENT}\n  ${SIDEBAR_SOLID_DEFINITION_FRAGMENT}\n`;\n\nexport const OpDetailScrollContainer = styled.div`\n  overflow: scroll;\n  flex: 1;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  NonIdealState,\n  SplitPanelContainer,\n  SuggestionProvider,\n  TokenizingField,\n  TokenizingFieldValue,\n  stringFromValue,\n  tokenizedValuesFromString,\n  FontFamily,\n} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\nimport {AutoSizer, CellMeasurer, CellMeasurerCache, List} from 'react-virtualized';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {OpDetailScrollContainer, UsedSolidDetails} from './OpDetailsRoot';\nimport {OpTypeSignature, OP_TYPE_SIGNATURE_FRAGMENT} from './OpTypeSignature';\nimport {\n  OpsRootQuery,\n  OpsRootQueryVariables,\n  OpsRootQuery_repositoryOrError_Repository_usedSolids,\n} from './types/OpsRootQuery';\n\nfunction flatUniq(arrs: string[][]) {\n  const results: {[key: string]: boolean} = {};\n  for (const arr of arrs) {\n    for (const item of arr) {\n      results[item] = true;\n    }\n  }\n  return Object.keys(results).sort((a, b) => a.localeCompare(b));\n}\n\ntype Solid = OpsRootQuery_repositoryOrError_Repository_usedSolids;\n\nfunction searchSuggestionsForOps(solids: Solid[]): SuggestionProvider[] {\n  return [\n    {\n      token: 'name',\n      values: () => solids.map((s) => s.definition.name),\n    },\n    {\n      token: 'job',\n      values: () =>\n        flatUniq(\n          solids.map((s) =>\n            s.invocations.filter((i) => !i.pipeline.isJob).map((i) => i.pipeline.name),\n          ),\n        ),\n    },\n    {\n      token: 'pipeline',\n      values: () =>\n        flatUniq(\n          solids.map((s) =>\n            s.invocations.filter((i) => i.pipeline.isJob).map((i) => i.pipeline.name),\n          ),\n        ),\n    },\n    {\n      token: 'input',\n      values: () =>\n        flatUniq(solids.map((s) => s.definition.inputDefinitions.map((d) => d.type.displayName))),\n    },\n    {\n      token: 'output',\n      values: () =>\n        flatUniq(solids.map((s) => s.definition.outputDefinitions.map((d) => d.type.displayName))),\n    },\n  ];\n}\n\nfunction filterSolidsWithSearch(solids: Solid[], search: TokenizingFieldValue[]) {\n  return solids.filter((s) => {\n    for (const item of search) {\n      if (\n        (item.token === 'name' || item.token === undefined) &&\n        !s.definition.name.startsWith(item.value)\n      ) {\n        return false;\n      }\n      if (\n        (item.token === 'pipeline' || item.token === 'job') &&\n        !s.invocations.some((i) => i.pipeline.name === item.value)\n      ) {\n        return false;\n      }\n      if (\n        item.token === 'input' &&\n        !s.definition.inputDefinitions.some((i) => i.type.displayName.startsWith(item.value))\n      ) {\n        return false;\n      }\n      if (\n        item.token === 'output' &&\n        !s.definition.outputDefinitions.some((i) => i.type.displayName.startsWith(item.value))\n      ) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const OpsRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n  useDocumentTitle('Ops');\n\n  const {name} = useParams<{name?: string}>();\n  const {repoAddress} = props;\n\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<OpsRootQuery, OpsRootQueryVariables>(OPS_ROOT_QUERY, {\n    variables: {repositorySelector},\n  });\n\n  return (\n    <div style={{height: '100%'}}>\n      <Loading queryResult={queryResult}>\n        {({repositoryOrError}) => {\n          if (repositoryOrError?.__typename === 'Repository' && repositoryOrError.usedSolids) {\n            return (\n              <OpsRootWithData\n                {...props}\n                name={name}\n                repoAddress={repoAddress}\n                usedSolids={repositoryOrError.usedSolids}\n              />\n            );\n          }\n          return null;\n        }}\n      </Loading>\n    </div>\n  );\n};\n\nconst OpsRootWithData: React.FC<Props & {name?: string; usedSolids: Solid[]}> = (props) => {\n  const {name, repoAddress, usedSolids} = props;\n  const history = useHistory();\n  const location = useLocation();\n\n  const {q, typeExplorer} = qs.parse(location.search, {ignoreQueryPrefix: true});\n  const suggestions = searchSuggestionsForOps(usedSolids);\n  const search = tokenizedValuesFromString((q as string) || '', suggestions);\n  const filtered = filterSolidsWithSearch(usedSolids, search);\n\n  const selected = usedSolids.find((s) => s.definition.name === name);\n\n  const onSearch = (search: TokenizingFieldValue[]) => {\n    history.replace({\n      search: `?${qs.stringify({q: stringFromValue(search)})}`,\n    });\n  };\n\n  const onClickOp = (defName: string) => {\n    history.replace(workspacePathFromAddress(repoAddress, `/ops/${defName}?${qs.stringify({q})}`));\n  };\n\n  React.useEffect(() => {\n    // If the user has typed in a search that brings us to a single result, autoselect it\n    if (filtered.length === 1 && (!selected || filtered[0] !== selected)) {\n      onClickOp(filtered[0].definition.name);\n    }\n\n    // If the user has clicked a type, translate it into a search\n    if (typeof typeExplorer === 'string') {\n      onSearch([...search, {token: 'input', value: typeExplorer}]);\n    }\n  });\n\n  const onClickInvocation = React.useCallback(\n    ({pipelineName, handleID}) => {\n      history.push(\n        workspacePathFromAddress(\n          repoAddress,\n          `/pipeline_or_job/${pipelineName}/${handleID.split('.').join('/')}`,\n        ),\n      );\n    },\n    [history, repoAddress],\n  );\n\n  return (\n    <div style={{height: '100%', display: 'flex'}}>\n      <SplitPanelContainer\n        identifier=\"ops\"\n        firstInitialPercent={40}\n        firstMinSize={420}\n        first={\n          <OpListColumnContainer>\n            <Box\n              padding={{vertical: 12, horizontal: 24}}\n              border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            >\n              <TokenizingField\n                values={search}\n                onChange={(search) => onSearch(search)}\n                suggestionProviders={suggestions}\n                placeholder=\"Filter by name or input/output type...\"\n              />\n            </Box>\n            <div style={{flex: 1}}>\n              <AutoSizer nonce={window.__webpack_nonce__}>\n                {({height, width}) => (\n                  <OpList\n                    height={height}\n                    width={width}\n                    selected={selected}\n                    onClickOp={onClickOp}\n                    items={filtered.sort((a, b) =>\n                      a.definition.name.localeCompare(b.definition.name),\n                    )}\n                  />\n                )}\n              </AutoSizer>\n            </div>\n          </OpListColumnContainer>\n        }\n        second={\n          selected ? (\n            <OpDetailScrollContainer>\n              <UsedSolidDetails\n                name={selected.definition.name}\n                onClickInvocation={onClickInvocation}\n                repoAddress={repoAddress}\n              />\n            </OpDetailScrollContainer>\n          ) : (\n            <Box padding={{vertical: 64}}>\n              <NonIdealState\n                icon=\"no-results\"\n                title=\"No op selected\"\n                description=\"Select an op to see its definition and invocations\"\n              />\n            </Box>\n          )\n        }\n      />\n    </div>\n  );\n};\n\ninterface OpListProps {\n  items: Solid[];\n  width: number;\n  height: number;\n  selected: Solid | undefined;\n  onClickOp: (name: string) => void;\n}\n\nconst OpList: React.FC<OpListProps> = (props) => {\n  const {items, selected} = props;\n  const cache = React.useRef(new CellMeasurerCache({defaultHeight: 60, fixedWidth: true}));\n\n  // Reset our cell sizes when the panel's width is changed. This is similar to a useEffect\n  // but we need it to run /before/ the render not just after it completes.\n  const lastWidth = React.useRef(props.width);\n  if (props.width !== lastWidth.current) {\n    cache.current.clearAll();\n    lastWidth.current = props.width;\n  }\n\n  const selectedIndex = selected ? items.findIndex((item) => item === selected) : undefined;\n\n  return (\n    <Container>\n      <List\n        width={props.width}\n        height={props.height}\n        rowCount={props.items.length}\n        rowHeight={cache.current.rowHeight}\n        scrollToIndex={selectedIndex}\n        className=\"solids-list\"\n        rowRenderer={({parent, index, key, style}) => {\n          const solid = props.items[index];\n          return (\n            <CellMeasurer cache={cache.current} index={index} parent={parent} key={key}>\n              <OpListItem\n                style={style}\n                selected={solid === props.selected}\n                onClick={() => props.onClickOp(solid.definition.name)}\n              >\n                <OpName>{solid.definition.name}</OpName>\n                <OpTypeSignature definition={solid.definition} />\n              </OpListItem>\n            </CellMeasurer>\n          );\n        }}\n        overscanRowCount={10}\n      />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  .solids-list:focus {\n    outline: none;\n  }\n`;\n\nconst OPS_ROOT_QUERY = gql`\n  query OpsRootQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        usedSolids {\n          __typename\n          definition {\n            name\n            ...OpTypeSignatureFragment\n          }\n          invocations {\n            __typename\n            pipeline {\n              id\n              isJob\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  ${OP_TYPE_SIGNATURE_FRAGMENT}\n`;\n\nconst OpListItem = styled.div<{selected: boolean}>`\n  background: ${({selected}) => (selected ? Colors.Gray100 : Colors.White)};\n  box-shadow: ${({selected}) => (selected ? Colors.HighlightGreen : 'transparent')} 4px 0 0 inset,\n    ${Colors.KeylineGray} 0 -1px 0 inset;\n  color: ${Colors.Gray800};\n  cursor: pointer;\n  font-size: 14px;\n  display: flex;\n  flex-direction: column;\n  padding: 12px 24px;\n  user-select: none;\n\n  & > code.bp3-code {\n    color: ${Colors.Gray800};\n    background: transparent;\n    font-family: ${FontFamily.monospace};\n    padding: 5px 0 0 0;\n  }\n`;\n\nconst OpName = styled.div`\n  flex: 1;\n  font-weight: 600;\n`;\n\nconst OpListColumnContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n","import {useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {InstigationType} from '../types/globalTypes';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SCHEDULES_ROOT_QUERY} from './ScheduleUtils';\nimport {SchedulerInfo} from './SchedulerInfo';\nimport {SchedulesNextTicks} from './SchedulesNextTicks';\nimport {SchedulesTable} from './SchedulesTable';\nimport {SchedulesRootQuery, SchedulesRootQueryVariables} from './types/SchedulesRootQuery';\n\nexport const SchedulesRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n  useDocumentTitle('Schedules');\n\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<SchedulesRootQuery, SchedulesRootQueryVariables>(\n    SCHEDULES_ROOT_QUERY,\n    {\n      variables: {\n        repositorySelector,\n        instigationType: InstigationType.SCHEDULE,\n      },\n      fetchPolicy: 'cache-and-network',\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, 50 * 1000);\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {(result) => {\n        const {repositoryOrError, unloadableInstigationStatesOrError, instance} = result;\n        let schedulesSection = null;\n\n        if (repositoryOrError.__typename === 'PythonError') {\n          schedulesSection = <PythonErrorInfo error={repositoryOrError} />;\n        } else if (repositoryOrError.__typename === 'RepositoryNotFoundError') {\n          schedulesSection = (\n            <NonIdealState\n              icon=\"error\"\n              title=\"Repository not found\"\n              description=\"Could not load this repository.\"\n            />\n          );\n        } else if (!repositoryOrError.schedules.length) {\n          schedulesSection = (\n            <NonIdealState\n              icon=\"schedule\"\n              title=\"No schedules found\"\n              description={\n                <p>\n                  This repository does not have any schedules defined. Visit the{' '}\n                  <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules\">\n                    scheduler documentation\n                  </a>{' '}\n                  for more information about scheduling runs in Dagster.\n                </p>\n              }\n            />\n          );\n        } else {\n          schedulesSection = repositoryOrError.schedules.length > 0 && (\n            <>\n              <SchedulesTable schedules={repositoryOrError.schedules} repoAddress={repoAddress} />\n              <Box\n                padding={{vertical: 16, horizontal: 24}}\n                border={{side: 'bottom', width: 1, color: Colors.Gray100}}\n              >\n                <Subheading>Scheduled ticks</Subheading>\n              </Box>\n              <SchedulesNextTicks repos={[repositoryOrError]} />\n            </>\n          );\n        }\n\n        return (\n          <>\n            <Box padding={{horizontal: 24, vertical: 16}}>\n              <SchedulerInfo daemonHealth={instance.daemonHealth} />\n            </Box>\n            {schedulesSection}\n            {unloadableInstigationStatesOrError.__typename === 'PythonError' ? (\n              <PythonErrorInfo error={unloadableInstigationStatesOrError} />\n            ) : (\n              <UnloadableSchedules scheduleStates={unloadableInstigationStatesOrError.results} />\n            )}\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n","import {useQuery, gql} from '@apollo/client';\nimport {Box, NonIdealState} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {InstigationType} from '../types/globalTypes';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorsTable} from './SensorsTable';\nimport {SensorsRootQuery, SensorsRootQueryVariables} from './types/SensorsRootQuery';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const SensorsRoot = (props: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Sensors');\n\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<SensorsRootQuery, SensorsRootQueryVariables>(SENSORS_ROOT_QUERY, {\n    variables: {\n      repositorySelector,\n      instigationType: InstigationType.SENSOR,\n    },\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useQueryRefreshAtInterval(queryResult, 50 * 1000);\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {(result) => {\n        const {sensorsOrError, unloadableInstigationStatesOrError, instance} = result;\n        const content = () => {\n          if (sensorsOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={sensorsOrError} />;\n          } else if (unloadableInstigationStatesOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={unloadableInstigationStatesOrError} />;\n          } else if (sensorsOrError.__typename === 'RepositoryNotFoundError') {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"error\"\n                  title=\"Repository not found\"\n                  description=\"Could not load this repository.\"\n                />\n              </Box>\n            );\n          } else if (!sensorsOrError.results.length) {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"sensors\"\n                  title=\"No Sensors Found\"\n                  description={\n                    <p>\n                      This repository does not have any sensors defined. Visit the{' '}\n                      <a\n                        href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        sensors documentation\n                      </a>{' '}\n                      for more information about creating sensors in Dagster.\n                    </p>\n                  }\n                />\n              </Box>\n            );\n          } else {\n            return (\n              <>\n                {sensorsOrError.results.length > 0 && (\n                  <Box padding={{horizontal: 24, vertical: 16}}>\n                    <SensorInfo daemonHealth={instance.daemonHealth} />\n                  </Box>\n                )}\n                <SensorsTable repoAddress={repoAddress} sensors={sensorsOrError.results} />\n                <UnloadableSensors sensorStates={unloadableInstigationStatesOrError.results} />\n              </>\n            );\n          }\n        };\n\n        return <div>{content()}</div>;\n      }}\n    </Loading>\n  );\n};\n\nconst SENSORS_ROOT_QUERY = gql`\n  query SensorsRootQuery(\n    $repositorySelector: RepositorySelector!\n    $instigationType: InstigationType!\n  ) {\n    sensorsOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ...PythonErrorFragment\n      ... on Sensors {\n        results {\n          id\n          ...SensorFragment\n        }\n      }\n    }\n    unloadableInstigationStatesOrError(instigationType: $instigationType) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${SENSOR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {RepositoryLink} from '../nav/RepositoryLink';\n\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  RepositoryAssetsListQuery,\n  RepositoryAssetsListQueryVariables,\n} from './types/RepositoryAssetsListQuery';\n\nconst REPOSITORY_ASSETS_LIST_QUERY = gql`\n  query RepositoryAssetsListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        assetNodes {\n          id\n          assetKey {\n            path\n          }\n          opNames\n          description\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const RepositoryAssetsList: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<\n    RepositoryAssetsListQuery,\n    RepositoryAssetsListQueryVariables\n  >(REPOSITORY_ASSETS_LIST_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const assetsForTable = React.useMemo(\n    () =>\n      (repo?.__typename === 'Repository' ? [...repo.assetNodes] : []).sort((a, b) =>\n        displayNameForAssetKey(a.assetKey).localeCompare(displayNameForAssetKey(b.assetKey)),\n      ),\n    [repo],\n  );\n\n  if (loading) {\n    return null;\n  }\n\n  if (error || !assetsForTable) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unable to load graphs\"\n          description={`Could not load graphs for ${repoAddressAsString(repoAddress)}`}\n        />\n      </Box>\n    );\n  }\n\n  if (!assetsForTable.length) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No assets found\"\n          description={`No @asset definitions for ${repoAddressAsString(repoAddress)}`}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Asset Key</th>\n          <th>Defined In</th>\n        </tr>\n      </thead>\n      <tbody>\n        {assetsForTable.map((asset) => (\n          <tr key={asset.id}>\n            <td>\n              <Box flex={{direction: 'column', gap: 4}}>\n                <Link to={assetDetailsPathForKey(asset.assetKey)}>\n                  {displayNameForAssetKey(asset.assetKey)}\n                </Link>\n                <Description>{asset.description}</Description>\n              </Box>\n            </td>\n            <td>\n              <Box flex={{direction: 'column'}}>\n                <RepositoryLink\n                  repoAddress={{\n                    name: asset.repository.name,\n                    location: asset.repository.location.name,\n                  }}\n                />\n              </Box>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.Gray400};\n  font-size: 12px;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Group, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  RepositoryGraphsListQuery,\n  RepositoryGraphsListQueryVariables,\n} from './types/RepositoryGraphsListQuery';\nimport {workspacePath} from './workspacePath';\n\nconst REPOSITORY_GRAPHS_LIST_QUERY = gql`\n  query RepositoryGraphsListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        usedSolids {\n          definition {\n            __typename\n            ... on CompositeSolidDefinition {\n              id\n              name\n              description\n            }\n          }\n          invocations {\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n        pipelines {\n          id\n          description\n          name\n          isJob\n          graphName\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\ninterface Item {\n  name: string;\n  description: string | null;\n  path: string;\n  repoAddress: RepoAddress;\n}\n\nexport const RepositoryGraphsList: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<\n    RepositoryGraphsListQuery,\n    RepositoryGraphsListQueryVariables\n  >(REPOSITORY_GRAPHS_LIST_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const graphsForTable = React.useMemo(() => {\n    if (!repo || repo.__typename !== 'Repository') {\n      return null;\n    }\n    const jobGraphNames = new Set<string>(\n      repo.pipelines\n        .filter((p) => p.isJob && !isHiddenAssetGroupJob(p.name))\n        .map((p) => p.graphName),\n    );\n    const items: Item[] = Array.from(jobGraphNames).map((graphName) => ({\n      name: graphName,\n      path: `/graphs/${graphName}`,\n      description: null,\n      repoAddress,\n    }));\n\n    repo.usedSolids.forEach((s) => {\n      if (s.definition.__typename === 'CompositeSolidDefinition') {\n        items.push({\n          name: s.definition.name,\n          path: `/graphs/${s.invocations[0].pipeline.name}/${s.invocations[0].solidHandle.handleID}/`,\n          description: s.definition.description,\n          repoAddress,\n        });\n      }\n    });\n\n    return items.sort((a, b) => a.name.localeCompare(b.name));\n  }, [repo, repoAddress]);\n\n  if (loading) {\n    return null;\n  }\n\n  if (error || !graphsForTable) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unable to load graphs\"\n          description={`Could not load graphs for ${repoAddressAsString(repoAddress)}`}\n        />\n      </Box>\n    );\n  }\n\n  if (!graphsForTable.length) {\n    return (\n      <Box padding={64}>\n        <NonIdealState\n          icon=\"schema\"\n          title=\"No graphs found\"\n          description={<div>This repository does not have any graphs defined.</div>}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Graph</th>\n        </tr>\n      </thead>\n      <tbody>\n        {graphsForTable.map(({name, description, path, repoAddress}) => (\n          <tr key={`${name}-${repoAddressAsString(repoAddress)}`}>\n            <td>\n              <Group direction=\"column\" spacing={4}>\n                <Link to={workspacePath(repoAddress.name, repoAddress.location, path)}>{name}</Link>\n                <Description>{description}</Description>\n              </Group>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.Gray400};\n  font-size: 12px;\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, Group, Table, Caption} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {RunStatusWithStats} from '../runs/RunStatusDots';\nimport {repoAddressAsString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {PipelineReference} from './PipelineReference';\nimport {PipelineTableFragment} from './types/PipelineTableFragment';\n\ntype PipelineForTable = {\n  pipelineOrJob: PipelineTableFragment;\n  repoAddress: RepoAddress;\n};\n\ninterface Props {\n  pipelinesOrJobs: PipelineForTable[];\n  showRepo: boolean;\n}\n\nexport const PipelineTable: React.FC<Props> = (props) => {\n  const {pipelinesOrJobs, showRepo} = props;\n\n  const anyPipelines = pipelinesOrJobs.some(({pipelineOrJob}) => !pipelineOrJob.isJob);\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '50%', minWidth: '400px'}}>\n            {anyPipelines ? 'Job or Pipeline' : 'Job'}\n          </th>\n          <th>Schedules</th>\n          <th>Sensors</th>\n          <th style={{whiteSpace: 'nowrap'}}>Recent runs</th>\n        </tr>\n      </thead>\n      <tbody>\n        {pipelinesOrJobs.map(({pipelineOrJob, repoAddress}) => (\n          <tr key={`${pipelineOrJob.name}-${repoAddressAsString(repoAddress)}`}>\n            <td>\n              <Group direction=\"column\" spacing={4}>\n                <PipelineReference\n                  isJob={pipelineOrJob.isJob}\n                  pipelineName={pipelineOrJob.name}\n                  pipelineHrefContext={repoAddress}\n                  truncationThreshold={80}\n                />\n                {showRepo ? <Caption>{repoAddressAsString(repoAddress)}</Caption> : null}\n                <Description>{pipelineOrJob.description}</Description>\n              </Group>\n            </td>\n            <td>\n              {pipelineOrJob.schedules?.length ? (\n                <Group direction=\"column\" spacing={2}>\n                  {pipelineOrJob.schedules.map((schedule) => (\n                    <Link\n                      key={schedule.name}\n                      to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}\n                    >\n                      {schedule.name}\n                    </Link>\n                  ))}\n                </Group>\n              ) : (\n                <div style={{color: Colors.Gray200}}>None</div>\n              )}\n            </td>\n            <td>\n              {pipelineOrJob.sensors?.length ? (\n                <Group direction=\"column\" spacing={2}>\n                  {pipelineOrJob.sensors.map((sensor) => (\n                    <Link\n                      key={sensor.name}\n                      to={workspacePathFromAddress(repoAddress, `/sensors/${sensor.name}`)}\n                    >\n                      {sensor.name}\n                    </Link>\n                  ))}\n                </Group>\n              ) : (\n                <div style={{color: Colors.Gray200}}>None</div>\n              )}\n            </td>\n            <td>\n              <Group direction=\"row\" spacing={4} alignItems=\"center\">\n                {pipelineOrJob.runs.map((run) => (\n                  <RunStatusWithStats\n                    key={run.id}\n                    runId={run.runId}\n                    status={run.status}\n                    size={12}\n                  />\n                ))}\n              </Group>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.Gray400};\n  font-size: 12px;\n`;\n\nexport const PIPELINE_TABLE_FRAGMENT = gql`\n  fragment PipelineTableFragment on Pipeline {\n    id\n    description\n    isJob\n    name\n    modes {\n      id\n      name\n    }\n    runs(limit: 5) {\n      id\n      mode\n      runId\n      status\n    }\n    schedules {\n      id\n      name\n      mode\n    }\n    sensors {\n      id\n      name\n      targets {\n        mode\n        pipelineName\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {PipelineTable, PIPELINE_TABLE_FRAGMENT} from '../pipelines/PipelineTable';\n\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  RepositoryPipelinesListQuery,\n  RepositoryPipelinesListQueryVariables,\n} from './types/RepositoryPipelinesListQuery';\n\nconst REPOSITORY_PIPELINES_LIST_QUERY = gql`\n  query RepositoryPipelinesListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        pipelines {\n          id\n          ...PipelineTableFragment\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n  ${PIPELINE_TABLE_FRAGMENT}\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n  display: 'jobs' | 'pipelines';\n}\n\nexport const RepositoryPipelinesList: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {display, repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<\n    RepositoryPipelinesListQuery,\n    RepositoryPipelinesListQueryVariables\n  >(REPOSITORY_PIPELINES_LIST_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const pipelinesForTable = React.useMemo(() => {\n    if (!repo || repo.__typename !== 'Repository') {\n      return null;\n    }\n    return repo.pipelines\n      .filter((pipelineOrJob) => !isHiddenAssetGroupJob(pipelineOrJob.name))\n      .map((pipelineOrJob) => ({\n        pipelineOrJob,\n        repoAddress,\n      }))\n      .filter(({pipelineOrJob}) =>\n        display === 'jobs' ? pipelineOrJob.isJob : !pipelineOrJob.isJob,\n      );\n  }, [display, repo, repoAddress]);\n\n  if (loading) {\n    return null;\n  }\n\n  if (error || !pipelinesForTable) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unable to load pipelines\"\n          description={`Could not load pipelines for ${repoAddressAsString(repoAddress)}`}\n        />\n      </Box>\n    );\n  }\n\n  if (!pipelinesForTable.length) {\n    return (\n      <Box padding={64}>\n        <NonIdealState\n          icon=\"job\"\n          title={display === 'jobs' ? 'No jobs found' : 'No pipelines found'}\n          description={\n            <div>\n              {display === 'jobs'\n                ? 'This repository does not have any jobs defined.'\n                : 'This repository does not have any pipelines defined.'}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return <PipelineTable pipelinesOrJobs={pipelinesForTable} showRepo={false} />;\n};\n","import {Box, PageHeader, Tabs, Tag, Heading} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Redirect, Route, Switch, useParams} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {OpsRoot} from '../ops/OpsRoot';\nimport {SchedulesRoot} from '../schedules/SchedulesRoot';\nimport {SensorsRoot} from '../sensors/SensorsRoot';\nimport {TabLink} from '../ui/TabLink';\n\nimport {RepositoryAssetsList} from './RepositoryAssetsList';\nimport {RepositoryGraphsList} from './RepositoryGraphsList';\nimport {RepositoryPipelinesList} from './RepositoryPipelinesList';\nimport {useRepository} from './WorkspaceContext';\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const WorkspaceRepoRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const {tab} = useParams<{tab?: string}>();\n\n  const path = repoAddressAsString(repoAddress);\n  const repo = useRepository(repoAddress);\n\n  const anyPipelines = React.useMemo(() => {\n    return repo?.repository.pipelines.some((pipelineOrJob) => !pipelineOrJob.isJob);\n  }, [repo]);\n\n  const tabs = React.useMemo(() => {\n    const tabList = [\n      {\n        text: 'Assets',\n        href: workspacePathFromAddress(repoAddress, '/assets'),\n      },\n      {text: 'Jobs', href: workspacePathFromAddress(repoAddress, '/jobs')},\n      anyPipelines\n        ? {text: 'Pipelines', href: workspacePathFromAddress(repoAddress, '/pipelines')}\n        : null,\n      {text: 'Graphs', href: workspacePathFromAddress(repoAddress, '/graphs')},\n      {\n        text: 'Ops',\n        href: workspacePathFromAddress(repoAddress, '/ops'),\n      },\n      {text: 'Schedules', href: workspacePathFromAddress(repoAddress, '/schedules')},\n      {text: 'Sensors', href: workspacePathFromAddress(repoAddress, '/sensors')},\n    ];\n\n    return tabList.filter(Boolean) as {text: string; href: string}[];\n  }, [anyPipelines, repoAddress]);\n\n  const activeTab = () => {\n    switch (tab) {\n      case 'schedules':\n        return 'Schedules';\n      case 'sensors':\n        return 'Sensors';\n      case 'solids':\n        return 'Solids';\n      case 'ops':\n        return 'Ops';\n      case 'graphs':\n        return 'Graphs';\n      case 'jobs':\n        return 'Jobs';\n      case 'pipelines':\n        return 'Pipelines';\n      case 'assets':\n        return 'Assets';\n      default:\n        return 'Jobs';\n    }\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%'}}>\n      <PageHeader\n        title={<Heading>{path}</Heading>}\n        tags={<Tag icon=\"folder\">Repository</Tag>}\n        tabs={\n          <Tabs size=\"small\" selectedTabId={activeTab()}>\n            {tabs.map(({href, text}) => (\n              <TabLink key={text} id={text} title={text} to={href} />\n            ))}\n          </Tabs>\n        }\n      />\n      <Container>\n        <Switch>\n          <Route path=\"/workspace/:repoPath/schedules\">\n            <SchedulesRoot repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/workspace/:repoPath/sensors\">\n            <SensorsRoot repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/workspace/:repoPath/assets(/?.*)\">\n            <RepositoryAssetsList repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/workspace/:repoPath/ops/:name?\">\n            <OpsRoot repoAddress={repoAddress} />\n          </Route>\n          <Route\n            path=\"/workspace/:repoPath/solids/:name?\"\n            render={(props) => <Redirect to={props.match.url.replace(/\\/solids\\/?/, '/ops/')} />}\n          />\n          <Route path=\"/workspace/:repoPath/pipelines\">\n            <RepositoryPipelinesList display=\"pipelines\" repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/workspace/:repoPath/jobs\">\n            <RepositoryPipelinesList display=\"jobs\" repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/workspace/:repoPath/graphs\" exact>\n            <RepositoryGraphsList repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/workspace/:repoPath/(.*)?\" render={() => <Redirect to={tabs[0].href} />} />\n        </Switch>\n      </Container>\n    </Box>\n  );\n};\n\nconst Container = styled.div`\n  flex: 1;\n  flex-grow: 1;\n  min-height: 0;\n`;\n","import {Box, MainContent, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Route, Switch, useParams} from 'react-router-dom';\n\nimport {AssetGroupRoot} from '../assets/AssetGroupRoot';\nimport {PipelineRoot} from '../pipelines/PipelineRoot';\nimport {ScheduleRoot} from '../schedules/ScheduleRoot';\nimport {SensorRoot} from '../sensors/SensorRoot';\n\nimport {GraphRoot} from './GraphRoot';\nimport {WorkspaceContext} from './WorkspaceContext';\nimport {WorkspaceOverviewRoot} from './WorkspaceOverviewRoot';\nimport {WorkspacePipelineRoot} from './WorkspacePipelineRoot';\nimport {WorkspaceRepoRoot} from './WorkspaceRepoRoot';\nimport {repoAddressFromPath} from './repoAddressFromPath';\n\nconst RepoRouteContainer = () => {\n  const {repoPath} = useParams<{repoPath: string}>();\n  const workspaceState = React.useContext(WorkspaceContext);\n  const addressForPath = repoAddressFromPath(repoPath);\n\n  // A RepoAddress could not be created for this path, which means it's invalid.\n  if (!addressForPath) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Invalid repository\"\n          description={\n            <div>\n              <div>\n                <strong>{repoPath}</strong>\n              </div>\n              {'  is not a valid repository path.'}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  const {loading} = workspaceState;\n\n  if (loading) {\n    return <div />;\n  }\n\n  const matchingRepo = workspaceState.allRepos.find(\n    (repo) =>\n      repo.repository.name === addressForPath.name &&\n      repo.repositoryLocation.name === addressForPath.location,\n  );\n\n  // If we don't have any active repositories, or if our active repo does not match\n  // the repo path in the URL, it means we aren't able to load this repo.\n  if (!matchingRepo) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unknown repository\"\n          description={\n            <div>\n              <div>\n                <strong>{repoPath}</strong>\n              </div>\n              {'  is not loaded in the current workspace.'}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/workspace/:repoPath/graphs/(/?.*)\">\n        <GraphRoot repoAddress={addressForPath} />\n      </Route>\n      <Route\n        path={[\n          '/workspace/:repoPath/pipelines/(/?.*)',\n          '/workspace/:repoPath/jobs/(/?.*)',\n          '/workspace/:repoPath/pipeline_or_job/(/?.*)',\n        ]}\n      >\n        <PipelineRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/workspace/:repoPath/schedules/:scheduleName/:runTab?\">\n        <ScheduleRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/workspace/:repoPath/sensors/:sensorName\">\n        <SensorRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path={['/workspace/:repoPath/asset-groups/:groupName/list(/?.*)']}>\n        <AssetGroupRoot repoAddress={addressForPath} tab=\"list\" />\n      </Route>\n      <Route\n        path={[\n          '/workspace/:repoPath/asset-groups/:groupName/(/?.*)',\n          '/workspace/:repoPath/asset-groups/:groupName',\n        ]}\n      >\n        <AssetGroupRoot repoAddress={addressForPath} tab=\"lineage\" />\n      </Route>\n      <Route path=\"/workspace/:repoPath/:tab?\">\n        <WorkspaceRepoRoot repoAddress={addressForPath} />\n      </Route>\n    </Switch>\n  );\n};\n\nexport const WorkspaceRoot = () => (\n  <MainContent>\n    <Switch>\n      <Route path=\"/workspace\" exact>\n        <WorkspaceOverviewRoot />\n      </Route>\n      <Route path={['/workspace/pipelines/:pipelinePath', '/workspace/jobs/:pipelinePath']}>\n        <WorkspacePipelineRoot />\n      </Route>\n      <Route path=\"/workspace/:repoPath\">\n        <RepoRouteContainer />\n      </Route>\n    </Switch>\n  </MainContent>\n);\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default WorkspaceRoot;\n"],"names":["AssetGroupRoot","repoAddress","tab","useTrackPageView","useParams","groupName","path","history","useHistory","useDocumentTitle","groupPath","workspacePathFromAddress","groupSelector","React","repositoryLocationName","location","repositoryName","name","onChangeExplorerPath","mode","explorerPathToString","onNavigateToForeignNode","node","replace","assetKey","map","encodeURIComponent","join","push","assetDetailsPathForKey","view","Page","style","display","flexDirection","paddingBottom","PageHeader","title","right","marginBottom","ReloadAllButton","label","tags","Tag","icon","RepositoryLink","tabs","flex","direction","justifyContent","alignItems","margin","Tabs","selectedTabId","TabLink","id","to","AssetGraphExplorer","fetchOptions","options","preferAssetRendering","explodeComposites","explorerPath","explorerPathFromString","AssetsCatalogTable","prefixPath","split","decodeURIComponent","filter","Boolean","setPrefixPath","LaunchpadSetupFromRunRoot","props","canLaunchPipelineExecution","usePermissions","repoPath","pipelinePath","runId","LaunchpadSetupFromRunAllowedRoot","pipelineName","repo","useRepository","isJob","isThisThingAJob","useJobTitle","useExecutionSessionStorage","storageData","onSave","useQuery","CONFIG_FOR_RUN_QUERY","variables","data","loading","runOrError","run","__typename","runConfigYaml","solidSelection","newSession","slice","Array","length","applyCreateSession","LaunchpadSessionLoading","LaunchpadSessionError","description","message","pathname","gql","PYTHON_ERROR_FRAGMENT","LaunchpadSetupRoot","LaunchpadSetupAllowedRoot","queryString","qs","window","search","ignoreQueryPrefix","config","solidSelectionQuery","TIME_FORMAT","showSeconds","showTimezone","LatestRunTag","lastRunQuery","LATEST_RUN_TAG_QUERY","runsFilter","notifyOnNetworkStatusChange","useQueryRefreshAtInterval","FIFTEEN_SECONDS","runsOrError","pipelineRunsOrError","results","stats","start","startTime","end","endTime","status","intent","RunStatus","gap","size","Tooltip","placement","content","color","Colors","padding","TimestampDisplay","timestamp","timeFormat","timingStringForStatus","RUN_TIME_FRAGMENT","JobMetadata","JOB_METADATA_QUERY","params","job","pipelineOrError","runsForAssetScan","JobScheduleOrSensorTag","RelatedAssetsTag","runs","matchingSchedules","schedules","matchingSensors","sensors","ScheduleOrSensorTag","open","setOpen","assetMap","forEach","assets","asset","assetKeyStr","key","keys","Object","ButtonLink","onClick","Dialog","canOutsideClickClose","canEscapeKeyClose","isOpen","onClose","maxWidth","minWidth","width","bottom","Table","wordBreak","Button","RUN_METADATA_FRAGMENT","JOB_METADATA_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","pipelineTabs","overview","pathComponent","playground","isAvailable","permissions","partitions","currentOrder","PipelineNav","match","useRouteMatch","active","component","tabList","find","t","tabForPipelinePathComponent","selector","snapshotId","hasPartitionSet","repository","partitionSets","some","partitionSet","explorerPathForTab","opNames","text","href","tabForKey","wrap","disabled","DISABLED_MESSAGE","DEFAULT_RUN_LAUNCHER_NAME","BackfillPartitionSelector","partitionSetName","onLaunch","onCancel","onSubmit","partitionData","partitionNames","k","selected","_setSelected","tagEditorOpen","setTagEditorOpen","setTags","query","setQuery","reexecute","fromFailure","setOptions","repositorySelector","repoAddressToSelector","BACKFILL_SELECTOR_QUERY","pipelineSelector","fetchPolicy","mounted","current","vertical","Spinner","purpose","pipelineSnapshotOrError","pipelineSnapshot","instance","solids","explodeCompositesInHandleGraph","solidHandles","h","solid","solidsFiltered","filterByQuery","stepRows","buildLayout","nodes","all","GanttChartMode","boxes","box","x","usingDefaultRunLauncher","runLauncher","isFailed","failedPartitions","missingPartitions","successPartitions","setSelected","selection","selectionSet","Set","has","Section","Checkbox","marginLeft","checked","every","includes","onChange","e","target","from","concat","Icon","small","PartitionRangeInput","value","top","PartitionStatus","onSelect","GraphQueryInput","items","placeholder","autoApplyChanges","TagEditor","tagsFromSession","onRequestClose","border","borderRadius","onRequestEdit","daemonHealth","daemonStatus","healthy","DaemonNotRunningAlert","runQueuingSupported","UsingDefaultLauncherAlert","LaunchBackfillButton","reexecutionSteps","step","undefined","onSuccess","backfillId","SharedToaster","action","showBackfillSuccessToast","onError","messageForLaunchBackfillError","showBackfillErrorToast","useMutation","LAUNCH_PARTITION_BACKFILL_MUTATION","launchBackfill","backfillParams","launchPartitionBackfill","count","reexecutionCount","buttonTitle","LaunchButton","runCount","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","result","errors","PythonErrorInfo","error","invalidStepKey","invalidOutputName","stepKey","idx","spacing","underline","showCustomAlert","body","Alert","rel","children","side","PartitionGraph","jobDataByPartition","stepDataByPartition","yLabel","hiddenStepKeys","hiddenPartitions","setHiddenPartitions","chart","onGraphClick","event","xAxis","scales","offsetX","offsetY","type","chartArea","left","shiftKey","labelIndex","getValueForPixel","partitionName","labels","defaultOptions","animation","y","plugins","legend","_e","_legendItem","maintainAspectRatio","jobData","stepData","hidden","stepDataByKey","_fillPartitions","buildDatasetData","allLabel","graphData","datasets","borderColor","backgroundColor","colorHash","PartitionGraphContainer","height","ref","points","pointData","point","styled","FAILED_STATUSES","PartitionView","queryResult","PARTITIONS_STATUS_QUERY","Loading","partitionSetOrError","partitionsOrError","PartitionViewContent","pageSize","setPageSize","offset","setOffset","showSteps","setShowSteps","showBackfillSetup","setShowBackfillSetup","blockDialog","setBlockDialog","canLaunchPartitionBackfill","useViewport","viewport","containerProps","backfillRefetchCounter","setBackfillRefetchCounter","usePartitionStepQuery","_approximatePageSize","Math","ceil","selectedPartitions","max","runDurationData","stepDurationData","p","runsLoaded","lastRun","stepStats","s","statusData","partitionStatusesOrError","runStatus","runDuration","zIndex","_backfillId","_stepQuery","CountBox","selectionWindowSize","maxIdx","selectedIdx","indexOf","nextOffset","min","tooltipMessage","PartitionStepStatus","JobBackfills","refetchCounter","cursorStack","setCursorStack","cursor","setCursor","JOB_BACKFILLS_QUERY","limit","partialRefetch","refetch","backfills","paginationProps","hasPrevCursor","hasNextCursor","popCursor","nextStack","pop","advanceCursor","nextCursor","reset","BackfillTable","showPartitionSet","allPartitions","borderLeft","fontSize","BACKFILL_TABLE_FRAGMENT","PipelinePartitionsRoot","useStripSnapshotFromPath","PIPELINE_PARTITIONS_ROOT_QUERY","partitionSetsOrError","PipelineOrJobDisambiguationRoot","useLocation","pipelineOrJobName","replacedPath","PipelineOverviewRoot","buildPipelineSelector","jobName","token","tokenForAssetKey","opsQuery","GraphExplorerJobContext","sidebarTab","SidebarPipelineOrJobOverview","PipelineRoot","render","PipelineRunsRoot","url","COLOR_MAP","InstigationTickStatus","LiveTickTimeline","ticks","nextTick","onHoverTick","onSelectTick","Date","now","setNow","graphNow","setGraphNow","isPaused","setPaused","interval","setInterval","clearInterval","nextTickRadius","sin","PI","tickData","tick","tickColors","tickRadii","fill","borderWidth","pointBorderWidth","pointBorderColor","pointRadius","pointHoverRadius","pointBackgroundColor","pointHoverBorderWidth","pointHoverBorderColor","duration","grid","bounds","time","minUnit","tooltip","displayColors","callbacks","tooltipItem","datasetIndex","dataIndex","cursorLabel","skipReason","runIds","originRunIds","_event","activeElements","item","index","onHover","elements","HTMLElement","element","TickDetailsDialog","instigationSelector","JOB_SELECTED_TICK_QUERY","skip","instigationStateOrError","copyValue","TICK_TAG_FRAGMENT","Chart","zoomPlugin","DEFAULT_SHOWN_STATUS_STATE","STATUS_TEXT_MAP","TicksTable","useQueryPersistedState","encode","states","queryState","state","toLowerCase","String","decode","shownStates","setShownStates","copyToClipboard","useCopyToClipboard","statuses","useCursorPaginatedQuery","nextCursorForResult","PAGE_SIZE","getResultArray","JOB_TICK_HISTORY_QUERY","instigationType","StatusFilter","horizontal","InstigationType","fontFamily","FontFamily","marginRight","str","TRUNCATION_THRESHOLD","CopyButton","marginTop","TickHistoryTimeline","onHighlightRunIds","Number","selectedTime","setSelectedTime","pollingPaused","pausePolling","ONE_MONTH","onTickClick","RUN_STATUS_FRAGMENT","IconWrapper","ScheduleDetails","schedule","refreshState","cronSchedule","executionTimezone","futureTicks","copyText","setCopyText","setTimeout","clearTimeout","scheduleState","latestTick","running","InstigationStatus","ScheduleSwitch","timezone","link","hover","QueryRefresh","MetadataTable","PipelineReference","pipelineHrefContext","SchedulePartitionStatus","humanCronString","ScheduleRoot","scheduleName","scheduleSelector","selectedTab","setSelectedTab","SCHEDULE_ROOT_QUERY","allowStaleData","scheduleOrError","showDaemonWarning","SchedulerInfo","SchedulePreviousRuns","highlightedIds","PREVIOUS_RUNS_FOR_SCHEDULE_QUERY","DagsterTag","RunTable","actionBarComponents","SCHEDULE_FRAGMENT","INSTANCE_HEALTH_FRAGMENT","RUN_TABLE_RUN_FRAGMENT","SensorPreviousRuns","sensor","PREVIOUS_RUNS_FOR_SENSOR_QUERY","targets","SensorRoot","sensorName","sensorSelector","SENSOR_ROOT_QUERY","sensorOrError","SensorDetails","SensorInfo","SENSOR_FRAGMENT","GraphRoot","minHeight","GraphExplorerRoot","parentNames","graphResult","GRAPH_EXPLORER_ROOT_QUERY","graphSelector","graphName","rootHandleID","requestScopeHandleID","graphOrError","parentHandle","solidHandle","displayedHandles","GraphExplorer","fullPath","pipelineOrGraph","handles","isGraph","getInvocations","definitionName","definition","handleID","GRAPH_EXPLORER_FRAGMENT","RepositoryRemoteLocationLink","repositoryUrl","formattedUrl","org","tag","urlObj","URL","host","formatRepositoryUrl","verticalAlign","LocationStatus","locationOrError","showDialog","setShowDialog","reloadFn","buildReloadFnForLocation","useRepositoryLocationReload","scope","reloading","tryReload","loadStatus","locationOrLoadError","minimal","onDismiss","onTryReload","ReloadButton","canReloadRepositoryLocation","ReloadRepositoryLocationButton","RepositoryLocationsList","WorkspaceContext","locationEntries","colSpan","displayMetadata","metadata","whiteSpace","Timestamp","unix","updatedTimestamp","WorkspaceOverviewRoot","useRepositoryOptions","anyPipelinesInWorkspace","option","pipelines","repositoryLocation","repoString","buildRepoPath","anyPipelines","pipelineOrJob","workspacePath","WorkspacePipelineRoot","entireMatch","toAppend","reposWithMatch","findRepoContainingPipeline","optionToRepoAddress","OpCard","inputDefinitions","outputDefinitions","layout","layoutOp","inputs","d","dependsOn","outputs","dependedBy","assetNodes","OpCardContainer","OpNode","invocation","minified","onDoubleClick","onEnterComposite","onHighlightEdges","focused","highlightedEdges","dim","OP_CARD_SOLID_DEFINITION_FRAGMENT","OP_NODE_DEFINITION_FRAGMENT","UsedSolidDetails","onClickInvocation","USED_SOLID_DETAILS_QUERY","repositoryOrError","usedSolid","SidebarOpDefinition","showingSubgraph","invocations","i","pipeline","SIDEBAR_SOLID_DEFINITION_FRAGMENT","OpDetailScrollContainer","flatUniq","arrs","arr","sort","a","b","localeCompare","OpsRoot","OPS_ROOT_QUERY","usedSolids","OpsRootWithData","q","typeExplorer","suggestions","values","displayName","tokenizedValuesFromString","filtered","startsWith","filterSolidsWithSearch","onSearch","stringFromValue","onClickOp","defName","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","OpListColumnContainer","TokenizingField","suggestionProviders","nonce","__webpack_nonce__","OpList","second","cache","CellMeasurerCache","defaultHeight","fixedWidth","lastWidth","clearAll","selectedIndex","findIndex","Container","rowCount","rowHeight","scrollToIndex","className","rowRenderer","parent","OpListItem","OpName","OpTypeSignature","overscanRowCount","OP_TYPE_SIGNATURE_FRAGMENT","SchedulesRoot","SCHEDULES_ROOT_QUERY","unloadableInstigationStatesOrError","schedulesSection","SchedulesTable","SchedulesNextTicks","repos","Unloadable","scheduleStates","SensorsRoot","SENSORS_ROOT_QUERY","sensorsOrError","SensorsTable","sensorStates","INSTIGATION_STATE_FRAGMENT","REPOSITORY_ASSETS_LIST_QUERY","RepositoryAssetsList","assetsForTable","displayNameForAssetKey","repoAddressAsString","Description","REPOSITORY_GRAPHS_LIST_QUERY","RepositoryGraphsList","graphsForTable","jobGraphNames","isHiddenAssetGroupJob","PipelineTable","pipelinesOrJobs","showRepo","truncationThreshold","PIPELINE_TABLE_FRAGMENT","REPOSITORY_PIPELINES_LIST_QUERY","RepositoryPipelinesList","pipelinesForTable","WorkspaceRepoRoot","activeTab","exact","RepoRouteContainer","workspaceState","addressForPath","repoAddressFromPath","allRepos","WorkspaceRoot","MainContent","M"],"sourceRoot":""}